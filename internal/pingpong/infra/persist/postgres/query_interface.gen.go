// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package persist_postgres

import (
	"context"
)

type Querier interface {
	//CountPerDay
	//
	//  SELECT DATE(created_at) AS creation_date, COUNT(*) AS count_created
	//  FROM pingpong
	//  GROUP BY creation_date
	//  ORDER BY creation_date ASC
	CountPerDay(ctx context.Context) ([]CountPerDayRow, error)
	//CreatePingPong
	//
	//  INSERT INTO pingpong (pingpong_id, ping_or_pong, created_at, deleted_at, deleted)
	//  VALUES ($1, $2, $3, $4, $5) RETURNING pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted
	CreatePingPong(ctx context.Context, arg CreatePingPongParams) (Pingpong, error)
	//FindAll
	//
	//  SELECT pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted
	//  FROM pingpong
	FindAll(ctx context.Context) ([]Pingpong, error)
	//FindAllPing
	//
	//  SELECT pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted
	//  FROM pingpong
	//  WHERE ping_or_pong = 'ping'
	FindAllPing(ctx context.Context) ([]Pingpong, error)
	//FindAllPong
	//
	//  SELECT pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted FROM pingpong
	//  WHERE ping_or_pong = 'pong'
	FindAllPong(ctx context.Context) ([]Pingpong, error)
	//FrequencyDistribution
	//
	//  SELECT ping_or_pong, COUNT(*) AS frequency
	//  FROM pingpong
	//  GROUP BY ping_or_pong
	//  ORDER BY frequency DESC
	FrequencyDistribution(ctx context.Context) ([]FrequencyDistributionRow, error)
	//FrequencyDistributionByDay
	//
	//  SELECT DATE(created_at) AS creation_date, ping_or_pong, COUNT(*) AS frequency
	//  FROM pingpong
	//  GROUP BY creation_date, ping_or_pong
	//  ORDER BY creation_date ASC, frequency DESC
	FrequencyDistributionByDay(ctx context.Context) ([]FrequencyDistributionByDayRow, error)
	//FrequencyDistributionByDayPing
	//
	//  SELECT DATE(created_at) AS creation_date, ping_or_pong AS ping, COUNT(*) AS frequency
	//  FROM pingpong
	//  WHERE ping = 'ping'
	//  GROUP BY creation_date, ping
	//  ORDER BY creation_date ASC, frequency DESC
	FrequencyDistributionByDayPing(ctx context.Context) ([]FrequencyDistributionByDayPingRow, error)
	//FrequencyDistributionByDayPong
	//
	//  SELECT DATE(created_at) AS creation_date, ping_or_pong AS pong, COUNT(*) AS frequency
	//  FROM pingpong
	//  WHERE pong = 'pong'
	//  GROUP BY creation_date, pong
	//  ORDER BY creation_date ASC, frequency DESC
	FrequencyDistributionByDayPong(ctx context.Context) ([]FrequencyDistributionByDayPongRow, error)
	//TotalNumberOfPingPongs
	//
	//  SELECT COUNT(*) FROM pingpong
	TotalNumberOfPingPongs(ctx context.Context) (int64, error)
	//TotalNumberOfPings
	//
	//  SELECT COUNT(*) FROM pingpong WHERE ping_or_pong = 'ping'
	TotalNumberOfPings(ctx context.Context) (int64, error)
	//TotalNumberOfPongs
	//
	//  SELECT COUNT(*) FROM pingpong WHERE ping_or_pong = 'pong'
	TotalNumberOfPongs(ctx context.Context) (int64, error)
}

var _ Querier = (*Queries)(nil)
