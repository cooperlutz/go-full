// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cmd.pingpong.sql

package persist_postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPingPong = `-- name: CreatePingPong :one
INSERT INTO pingpong (pingpong_id, ping_or_pong, created_at, deleted_at, deleted) 
VALUES ($1, $2, $3, $4, $5) RETURNING pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted
`

type CreatePingPongParams struct {
	PingpongID pgtype.UUID        `db:"pingpong_id" json:"pingpong_id"`
	PingOrPong pgtype.Text        `db:"ping_or_pong" json:"ping_or_pong"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Deleted    bool               `db:"deleted" json:"deleted"`
}

// CreatePingPong
//
//	INSERT INTO pingpong (pingpong_id, ping_or_pong, created_at, deleted_at, deleted)
//	VALUES ($1, $2, $3, $4, $5) RETURNING pingpong_id, ping_or_pong, created_at, updated_at, deleted_at, deleted
func (q *Queries) CreatePingPong(ctx context.Context, arg CreatePingPongParams) (Pingpong, error) {
	row := q.db.QueryRow(ctx, createPingPong,
		arg.PingpongID,
		arg.PingOrPong,
		arg.CreatedAt,
		arg.DeletedAt,
		arg.Deleted,
	)
	var i Pingpong
	err := row.Scan(
		&i.PingpongID,
		&i.PingOrPong,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
	)
	return i, err
}
