// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// PingPong A Ping or Pong
type PingPong struct {
	// Message The message of the Ping or Pong
	Message *string `json:"message,omitempty"`
}

// PingPongRaw A Ping or Pong
type PingPongRaw struct {
	// CreatedAt The creation timestamp of the entity
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Deleted Indicates if the entity is deleted
	Deleted *bool `json:"deleted,omitempty"`

	// DeletedAt The deletion timestamp of the entity, if applicable
	DeletedAt *time.Time `json:"deletedAt"`
	Id        *string    `json:"id,omitempty"`

	// Message The message of the Ping or Pong
	Message *string `json:"message,omitempty"`

	// UpdatedAt The last update timestamp of the entity
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PingPongs A collection of PingPong messages
type PingPongs struct {
	Pingpongs *[]PingPong `json:"pingpongs,omitempty"`
}

// PingPongsRaw A collection of PingPong messages
type PingPongsRaw struct {
	Pingpongs *[]PingPongRaw `json:"pingpongs,omitempty"`
}

// Trend A PingPong data trend
type Trend struct {
	// DimensionKeys The keys of the defined trend dimension
	DimensionKeys *[]TrendKey `json:"dimensionKeys,omitempty"`

	// DimensionValues values associated with the trend
	DimensionValues *[]TrendValue `json:"dimensionValues,omitempty"`
}

// TrendKey defines model for TrendKey.
type TrendKey = string

// TrendValue defines model for TrendValue.
type TrendValue = int

// PingPongJSONRequestBody defines body for PingPong for application/json ContentType.
type PingPongJSONRequestBody = PingPong

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get total number of ping pongs per day
	// (GET /metrics/dailyDistribution)
	GetDailyDistribution(w http.ResponseWriter, r *http.Request)
	// Get total number of Pings Pongs
	// (GET /metrics/totalPingPongs)
	GetTotalPingPongs(w http.ResponseWriter, r *http.Request)
	// Get total number of Pings
	// (GET /metrics/totalPings)
	GetTotalPings(w http.ResponseWriter, r *http.Request)
	// Get total number of Pongs
	// (GET /metrics/totalPongs)
	GetTotalPongs(w http.ResponseWriter, r *http.Request)
	// Get all Pings
	// (GET /ping-pong/pings)
	GetPings(w http.ResponseWriter, r *http.Request)
	// Get all Pongs
	// (GET /ping-pong/pongs)
	GetPongs(w http.ResponseWriter, r *http.Request)
	// Get all Pingpongs
	// (GET /ping-pongs)
	GetFindAllPingPongs(w http.ResponseWriter, r *http.Request)
	// Pong
	// (POST /ping-pongs)
	PingPong(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get total number of ping pongs per day
// (GET /metrics/dailyDistribution)
func (_ Unimplemented) GetDailyDistribution(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get total number of Pings Pongs
// (GET /metrics/totalPingPongs)
func (_ Unimplemented) GetTotalPingPongs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get total number of Pings
// (GET /metrics/totalPings)
func (_ Unimplemented) GetTotalPings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get total number of Pongs
// (GET /metrics/totalPongs)
func (_ Unimplemented) GetTotalPongs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all Pings
// (GET /ping-pong/pings)
func (_ Unimplemented) GetPings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all Pongs
// (GET /ping-pong/pongs)
func (_ Unimplemented) GetPongs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all Pingpongs
// (GET /ping-pongs)
func (_ Unimplemented) GetFindAllPingPongs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Pong
// (POST /ping-pongs)
func (_ Unimplemented) PingPong(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDailyDistribution operation middleware
func (siw *ServerInterfaceWrapper) GetDailyDistribution(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDailyDistribution(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTotalPingPongs operation middleware
func (siw *ServerInterfaceWrapper) GetTotalPingPongs(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTotalPingPongs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTotalPings operation middleware
func (siw *ServerInterfaceWrapper) GetTotalPings(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTotalPings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTotalPongs operation middleware
func (siw *ServerInterfaceWrapper) GetTotalPongs(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTotalPongs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPings operation middleware
func (siw *ServerInterfaceWrapper) GetPings(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPongs operation middleware
func (siw *ServerInterfaceWrapper) GetPongs(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPongs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFindAllPingPongs operation middleware
func (siw *ServerInterfaceWrapper) GetFindAllPingPongs(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFindAllPingPongs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PingPong operation middleware
func (siw *ServerInterfaceWrapper) PingPong(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Basic_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PingPong(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics/dailyDistribution", wrapper.GetDailyDistribution)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics/totalPingPongs", wrapper.GetTotalPingPongs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics/totalPings", wrapper.GetTotalPings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics/totalPongs", wrapper.GetTotalPongs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping-pong/pings", wrapper.GetPings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping-pong/pongs", wrapper.GetPongs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping-pongs", wrapper.GetFindAllPingPongs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ping-pongs", wrapper.PingPong)
	})

	return r
}

type GetDailyDistributionRequestObject struct {
}

type GetDailyDistributionResponseObject interface {
	VisitGetDailyDistributionResponse(w http.ResponseWriter) error
}

type GetDailyDistribution200ResponseHeaders struct {
	XRequestId string
}

type GetDailyDistribution200JSONResponse struct {
	Body    Trend
	Headers GetDailyDistribution200ResponseHeaders
}

func (response GetDailyDistribution200JSONResponse) VisitGetDailyDistributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDailyDistribution200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetDailyDistribution200ResponseHeaders
	ContentLength int64
}

func (response GetDailyDistribution200ApplicationxmlResponse) VisitGetDailyDistributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetDailyDistribution400Response struct {
}

func (response GetDailyDistribution400Response) VisitGetDailyDistributionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetDailyDistributiondefaultResponse struct {
	StatusCode int
}

func (response GetDailyDistributiondefaultResponse) VisitGetDailyDistributionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetTotalPingPongsRequestObject struct {
}

type GetTotalPingPongsResponseObject interface {
	VisitGetTotalPingPongsResponse(w http.ResponseWriter) error
}

type GetTotalPingPongs200ResponseHeaders struct {
	XRequestId string
}

type GetTotalPingPongs200JSONResponse struct {
	Body    int
	Headers GetTotalPingPongs200ResponseHeaders
}

func (response GetTotalPingPongs200JSONResponse) VisitGetTotalPingPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTotalPingPongs200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetTotalPingPongs200ResponseHeaders
	ContentLength int64
}

func (response GetTotalPingPongs200ApplicationxmlResponse) VisitGetTotalPingPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetTotalPingPongs400Response struct {
}

func (response GetTotalPingPongs400Response) VisitGetTotalPingPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTotalPingPongsdefaultResponse struct {
	StatusCode int
}

func (response GetTotalPingPongsdefaultResponse) VisitGetTotalPingPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetTotalPingsRequestObject struct {
}

type GetTotalPingsResponseObject interface {
	VisitGetTotalPingsResponse(w http.ResponseWriter) error
}

type GetTotalPings200ResponseHeaders struct {
	XRequestId string
}

type GetTotalPings200JSONResponse struct {
	Body    int
	Headers GetTotalPings200ResponseHeaders
}

func (response GetTotalPings200JSONResponse) VisitGetTotalPingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTotalPings200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetTotalPings200ResponseHeaders
	ContentLength int64
}

func (response GetTotalPings200ApplicationxmlResponse) VisitGetTotalPingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetTotalPings400Response struct {
}

func (response GetTotalPings400Response) VisitGetTotalPingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTotalPingsdefaultResponse struct {
	StatusCode int
}

func (response GetTotalPingsdefaultResponse) VisitGetTotalPingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetTotalPongsRequestObject struct {
}

type GetTotalPongsResponseObject interface {
	VisitGetTotalPongsResponse(w http.ResponseWriter) error
}

type GetTotalPongs200ResponseHeaders struct {
	XRequestId string
}

type GetTotalPongs200JSONResponse struct {
	Body    int
	Headers GetTotalPongs200ResponseHeaders
}

func (response GetTotalPongs200JSONResponse) VisitGetTotalPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTotalPongs200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetTotalPongs200ResponseHeaders
	ContentLength int64
}

func (response GetTotalPongs200ApplicationxmlResponse) VisitGetTotalPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetTotalPongs400Response struct {
}

func (response GetTotalPongs400Response) VisitGetTotalPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTotalPongsdefaultResponse struct {
	StatusCode int
}

func (response GetTotalPongsdefaultResponse) VisitGetTotalPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetPingsRequestObject struct {
}

type GetPingsResponseObject interface {
	VisitGetPingsResponse(w http.ResponseWriter) error
}

type GetPings200ResponseHeaders struct {
	XRequestId string
}

type GetPings200JSONResponse struct {
	Body    PingPongs
	Headers GetPings200ResponseHeaders
}

func (response GetPings200JSONResponse) VisitGetPingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPings200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetPings200ResponseHeaders
	ContentLength int64
}

func (response GetPings200ApplicationxmlResponse) VisitGetPingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPings400Response struct {
}

func (response GetPings400Response) VisitGetPingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPingsdefaultResponse struct {
	StatusCode int
}

func (response GetPingsdefaultResponse) VisitGetPingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetPongsRequestObject struct {
}

type GetPongsResponseObject interface {
	VisitGetPongsResponse(w http.ResponseWriter) error
}

type GetPongs200ResponseHeaders struct {
	XRequestId string
}

type GetPongs200JSONResponse struct {
	Body    PingPongs
	Headers GetPongs200ResponseHeaders
}

func (response GetPongs200JSONResponse) VisitGetPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPongs200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetPongs200ResponseHeaders
	ContentLength int64
}

func (response GetPongs200ApplicationxmlResponse) VisitGetPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPongs400Response struct {
}

func (response GetPongs400Response) VisitGetPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPongsdefaultResponse struct {
	StatusCode int
}

func (response GetPongsdefaultResponse) VisitGetPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetFindAllPingPongsRequestObject struct {
}

type GetFindAllPingPongsResponseObject interface {
	VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error
}

type GetFindAllPingPongs200ResponseHeaders struct {
	XRequestId string
}

type GetFindAllPingPongs200JSONResponse struct {
	Body    PingPongsRaw
	Headers GetFindAllPingPongs200ResponseHeaders
}

func (response GetFindAllPingPongs200JSONResponse) VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetFindAllPingPongs200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       GetFindAllPingPongs200ResponseHeaders
	ContentLength int64
}

func (response GetFindAllPingPongs200ApplicationxmlResponse) VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetFindAllPingPongs400Response struct {
}

func (response GetFindAllPingPongs400Response) VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetFindAllPingPongsdefaultResponse struct {
	StatusCode int
}

func (response GetFindAllPingPongsdefaultResponse) VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PingPongRequestObject struct {
	JSONBody *PingPongJSONRequestBody
	Body     io.Reader
}

type PingPongResponseObject interface {
	VisitPingPongResponse(w http.ResponseWriter) error
}

type PingPong200ResponseHeaders struct {
	XRequestId string
}

type PingPong200JSONResponse struct {
	Body    PingPong
	Headers PingPong200ResponseHeaders
}

func (response PingPong200JSONResponse) VisitPingPongResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PingPong200ApplicationxmlResponse struct {
	Body          io.Reader
	Headers       PingPong200ResponseHeaders
	ContentLength int64
}

func (response PingPong200ApplicationxmlResponse) VisitPingPongResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("X-Request-Id", fmt.Sprint(response.Headers.XRequestId))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PingPong400Response struct {
}

func (response PingPong400Response) VisitPingPongResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PingPongdefaultResponse struct {
	StatusCode int
}

func (response PingPongdefaultResponse) VisitPingPongResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get total number of ping pongs per day
	// (GET /metrics/dailyDistribution)
	GetDailyDistribution(ctx context.Context, request GetDailyDistributionRequestObject) (GetDailyDistributionResponseObject, error)
	// Get total number of Pings Pongs
	// (GET /metrics/totalPingPongs)
	GetTotalPingPongs(ctx context.Context, request GetTotalPingPongsRequestObject) (GetTotalPingPongsResponseObject, error)
	// Get total number of Pings
	// (GET /metrics/totalPings)
	GetTotalPings(ctx context.Context, request GetTotalPingsRequestObject) (GetTotalPingsResponseObject, error)
	// Get total number of Pongs
	// (GET /metrics/totalPongs)
	GetTotalPongs(ctx context.Context, request GetTotalPongsRequestObject) (GetTotalPongsResponseObject, error)
	// Get all Pings
	// (GET /ping-pong/pings)
	GetPings(ctx context.Context, request GetPingsRequestObject) (GetPingsResponseObject, error)
	// Get all Pongs
	// (GET /ping-pong/pongs)
	GetPongs(ctx context.Context, request GetPongsRequestObject) (GetPongsResponseObject, error)
	// Get all Pingpongs
	// (GET /ping-pongs)
	GetFindAllPingPongs(ctx context.Context, request GetFindAllPingPongsRequestObject) (GetFindAllPingPongsResponseObject, error)
	// Pong
	// (POST /ping-pongs)
	PingPong(ctx context.Context, request PingPongRequestObject) (PingPongResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDailyDistribution operation middleware
func (sh *strictHandler) GetDailyDistribution(w http.ResponseWriter, r *http.Request) {
	var request GetDailyDistributionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDailyDistribution(ctx, request.(GetDailyDistributionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDailyDistribution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDailyDistributionResponseObject); ok {
		if err := validResponse.VisitGetDailyDistributionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTotalPingPongs operation middleware
func (sh *strictHandler) GetTotalPingPongs(w http.ResponseWriter, r *http.Request) {
	var request GetTotalPingPongsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTotalPingPongs(ctx, request.(GetTotalPingPongsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTotalPingPongs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTotalPingPongsResponseObject); ok {
		if err := validResponse.VisitGetTotalPingPongsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTotalPings operation middleware
func (sh *strictHandler) GetTotalPings(w http.ResponseWriter, r *http.Request) {
	var request GetTotalPingsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTotalPings(ctx, request.(GetTotalPingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTotalPings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTotalPingsResponseObject); ok {
		if err := validResponse.VisitGetTotalPingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTotalPongs operation middleware
func (sh *strictHandler) GetTotalPongs(w http.ResponseWriter, r *http.Request) {
	var request GetTotalPongsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTotalPongs(ctx, request.(GetTotalPongsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTotalPongs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTotalPongsResponseObject); ok {
		if err := validResponse.VisitGetTotalPongsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPings operation middleware
func (sh *strictHandler) GetPings(w http.ResponseWriter, r *http.Request) {
	var request GetPingsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPings(ctx, request.(GetPingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPingsResponseObject); ok {
		if err := validResponse.VisitGetPingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPongs operation middleware
func (sh *strictHandler) GetPongs(w http.ResponseWriter, r *http.Request) {
	var request GetPongsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPongs(ctx, request.(GetPongsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPongs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPongsResponseObject); ok {
		if err := validResponse.VisitGetPongsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFindAllPingPongs operation middleware
func (sh *strictHandler) GetFindAllPingPongs(w http.ResponseWriter, r *http.Request) {
	var request GetFindAllPingPongsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFindAllPingPongs(ctx, request.(GetFindAllPingPongsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFindAllPingPongs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFindAllPingPongsResponseObject); ok {
		if err := validResponse.VisitGetFindAllPingPongsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PingPong operation middleware
func (sh *strictHandler) PingPong(w http.ResponseWriter, r *http.Request) {
	var request PingPongRequestObject

	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body PingPongJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/xml") {
		request.Body = r.Body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PingPong(ctx, request.(PingPongRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PingPong")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PingPongResponseObject); ok {
		if err := validResponse.VisitPingPongResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZbW/cuBH+K6yuH5pAWq0d38HdT3Wb3NVI0QS2+4LaxmGWnJV4oTg6ktr1wvB/L4aS",
	"1iuv/JLEORzuAiSwViRnnhk+fGYkXSeSqpos2uCT2XVSIih08fK/2Qn+3KAP2bHi316WWAFfKfTS6Tpo",
	"ssksOStRNFb/3KDQCm3QC41OLMiJUKJwrY1JkiZhXWMyS3xw2hbJzc1N2tmM7t5rW7wnW+w6OBI8JsiJ",
	"OJ4mtaMaXdAYF1boPRQ4DqwbFLSIaO4YwiuoasOgeOAPIxg3d2j+E8qQ3KQboCew+mis0iEEVEdhHG0c",
	"1mRF0BX6AFXdA+e8hvUA8v50/1W2N82me2d7+7PpdDad/i9JkwW5CkIySxQEzNjQblhpotBgQLUL49gq",
	"LSGgF3rbs9Be9Gu2QCzAeNyYnxMZBLtl/75A4/ADgabsHeraaAlzg/eFZRtj4vgsuAZHwtQxwke3OX0e",
	"Eh38Gb5T3x0cZK8O1LfZgdxX2SHMZXa4UHAIe3sHc3Uw5ryp1UOsMOCDaOd8aWI8xHc/xnZJxqCMW0kL",
	"0U/tM+Z3DkCtbVH3xnTAKl780eEimSXf5LdilHfSkG904RYbOAfrR8Deczp/ObwM4EmQzxxadZ+SRHQK",
	"AogQp93Fp3SF1muyb3Htx+nzAde+Z4vChbaoWmNiszhJnxZbhPoW17uBpbdI/g2mwREsy3hfgPckNfNd",
	"rHQoI6w+tqeDiE4+Ir8Mena9e/S2jN0OaxuwQNeWKLwK6CyY1yRHgvpeWyWoCaKklQjUKjgKED/o8Pdm",
	"LhzWFGvhmhon3tVoj94ft9ug2QTXxcaZZJaUIdR+lueFDmUzn0iq8hOca2PWeYEWHQRyGdVoodYZm436",
	"ZhcU6wrZADLqB1ag2V536y+GJJiSfJgdTg+nA3ezPB+O5r2dqOBDImnPNQCsePmyk5qXLwUHE0gorMj6",
	"4Dj0BUJoHEbK9fH6GqVecF3RZC/sN+LYBkeqke3vaHyYF/bF22AVs5X435zTWhAp4QO4wCJck7YhprdF",
	"O+ebMdNsTVtxYc87DPnpCoqibUwqCJd/Gsn3u6PjvJuenW5DzueG5nkFPqDLl+iY5j5/NZlO9ieVejG5",
	"sMdBgPGDTPhBKs5bZgx2cBTECSqSZp2PzH8hApERYBUHFic+aCL+fSEUyaZCG9rWAm2hLU7EKWd0TVbF",
	"E+gDWAVO3W7Z2ga4EisUjefEL3DFTpdoFTnBhyIedv84gEHyFEmfO76dtaayW1NdKpkfPYrTIXFYzgoC",
	"wwnl69FpTJ3ISZY6AZvQUmHAFg0UmEFhyQctI8XcAiTyipM3p2dMHC9WpZblhQVjaOXFnEIpyqYC62Pu",
	"WZOagK51o72kJbo40lhuntlfTKqEGubaaBbrXoE9uqWWGLWPdQOkRB8teWqcxAsrSWE63LRUxG7aUVOU",
	"wmJYkfsggoPFIsbAxyuKifhPiVa0FcKsN2q/1NCnKhUgJFnfVOiEBD4hW6D5f0wJyHCrzg4rCkPkAkSl",
	"ra7ACKiosYHD0ywKt0QzVGg5Eae60gYcR7gqIVzYTc69KGGJQpHFeIYNrdBlBpdoOIbCQVVpW6SbbWYg",
	"S/QRVNGg9zEP2goJxvDR30rw5IKrmtESrY/abqFibT+qQZYo9ic7UrharSYQRyfkirxb6vN/HP/tzT9P",
	"32T7k+mkDJWJVQdd5d8tTltfW+p9R0/jvJz7LB02DWjXN3Y6ksySvck0wrnKDBVRz4clwbXHadKdME15",
	"rwoBq9pAwJwXTuquhetGk1kSJYqbBghlrF55hcFp6XMF2qxfa66E86YV+eukwJEW9IRX4JKPSAAjbFPN",
	"0Q26p9hwiRqdUMCtKNMvcoAfHJMfMLzecZYmDn1NnGD2uD+d9mUMbcTQNf9RfX/yLbzbJ9BH+4OYh20b",
	"V5UZmtj0y/vfpqOFf5iFd2+T9KGn4zFE3fR8MDfaPmjjvfvotQSj+QTWTVeCF9CYkS35l8UrPvOoBDpH",
	"LkbrUTaOnwVm55w+/eMH7nnOL2/S62QOXssfoQllvHOZJr6pKnDrdn92trZuq+twWwNwG3yedBTiOzHV",
	"l+x9Q6xoavDM8DmsGmPT2dDDZ1LpYR58JdGnk4i3yG+2sWcPWDDr0PKnQvCNw/sY9Fns0Y+x5ytzft3M",
	"+QTOfFnF+ao2v2rOPFlnuLhlXNzi1RMIA8Y8QVieRVOe8mbJP86Up5r5nXGm38htnrQc2GEGfQIz7pOP",
	"Z1GOr8z44sy4oyAtB+4w4yNJMcqH77VVR+b5Wtgn7Wl8H/0s7Ggt/U6lo6Zd+eiJkiY1+REw78kHATtf",
	"G3aosfVyoPts+ldS62enwvPQYIwCMboa1oZAdUFoh6r9PHfzC7D8y4X222V3x7i7hGbhi1bdMoZ8fv3g",
	"l4N+WQ61zpd7CXsdvsV6bMHlBsPdcN+0fa/ol4jNseGT2L3Y2+Bmz3doqR9YMzb/Xh/R/uXN/wMAAP//",
	"wpbNLDYhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
