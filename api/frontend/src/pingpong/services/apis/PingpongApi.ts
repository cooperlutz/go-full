/* tslint:disable */
/* eslint-disable */
/**
 * PingPong
 * This is an **example** API to demonstrate features of OpenAPI specification # Introduction This API definition is intended to to be a good starting point for describing your API in  [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). It also demonstrates features of [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and  [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond the standard OpenAPI syntax we use a few  [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).  # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@localhost:8080
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { PingPong } from "../models/index";
import { PingPongFromJSON, PingPongToJSON } from "../models/index";

export interface PingPongRequest {
  pingPong: PingPong;
}

/**
 * PingpongApi - interface
 *
 * @export
 * @interface PingpongApiInterface
 */
export interface PingpongApiInterface {
  /**
   * Post a PingPong message
   * @summary Pong
   * @param {PingPong} pingPong Pong payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PingpongApiInterface
   */
  pingPongRaw(
    requestParameters: PingPongRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PingPong>>;

  /**
   * Post a PingPong message
   * Pong
   */
  pingPong(
    requestParameters: PingPongRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PingPong>;
}

/**
 *
 */
export class PingpongApi
  extends runtime.BaseAPI
  implements PingpongApiInterface
{
  /**
   * Post a PingPong message
   * Pong
   */
  async pingPongRaw(
    requestParameters: PingPongRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PingPong>> {
    if (requestParameters["pingPong"] == null) {
      throw new runtime.RequiredError(
        "pingPong",
        'Required parameter "pingPong" was null or undefined when calling pingPong().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/ping-pongs`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PingPongToJSON(requestParameters["pingPong"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PingPongFromJSON(jsonValue),
    );
  }

  /**
   * Post a PingPong message
   * Pong
   */
  async pingPong(
    requestParameters: PingPongRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PingPong> {
    const response = await this.pingPongRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
