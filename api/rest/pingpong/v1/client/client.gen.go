// Package api_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api_client

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// PingPong A Ping or Pong
type PingPong struct {
	// Message The message of the Ping or Pong
	Message *string `json:"message,omitempty"`
}

// PingPongRaw A Ping or Pong
type PingPongRaw struct {
	// CreatedAt The creation timestamp of the entity
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Deleted Indicates if the entity is deleted
	Deleted *bool `json:"deleted,omitempty"`

	// DeletedAt The deletion timestamp of the entity, if applicable
	DeletedAt *time.Time `json:"deletedAt"`
	Id        *string    `json:"id,omitempty"`

	// Message The message of the Ping or Pong
	Message *string `json:"message,omitempty"`

	// UpdatedAt The last update timestamp of the entity
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PingPongs A collection of PingPong messages
type PingPongs struct {
	Pingpongs *[]PingPong `json:"pingpongs,omitempty"`
}

// PingPongsRaw A collection of PingPong messages
type PingPongsRaw struct {
	Pingpongs *[]PingPongRaw `json:"pingpongs,omitempty"`
}

// Trend A PingPong data trend
type Trend struct {
	// DimensionKeys The keys of the defined trend dimension
	DimensionKeys *[]TrendKey `json:"dimensionKeys,omitempty"`

	// DimensionValues values associated with the trend
	DimensionValues *[]TrendValue `json:"dimensionValues,omitempty"`
}

// TrendKey defines model for TrendKey.
type TrendKey = string

// TrendValue defines model for TrendValue.
type TrendValue = int

// PingPongJSONRequestBody defines body for PingPong for application/json ContentType.
type PingPongJSONRequestBody = PingPong

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDailyDistribution request
	GetDailyDistribution(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTotalPingPongs request
	GetTotalPingPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTotalPings request
	GetTotalPings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTotalPongs request
	GetTotalPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPings request
	GetPings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPongs request
	GetPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFindAllPingPongs request
	GetFindAllPingPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingPongWithBody request with any body
	PingPongWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PingPong(ctx context.Context, body PingPongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDailyDistribution(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDailyDistributionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTotalPingPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTotalPingPongsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTotalPings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTotalPingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTotalPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTotalPongsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPongsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFindAllPingPongs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFindAllPingPongsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingPongWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingPongRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingPong(ctx context.Context, body PingPongJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingPongRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDailyDistributionRequest generates requests for GetDailyDistribution
func NewGetDailyDistributionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/dailyDistribution")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTotalPingPongsRequest generates requests for GetTotalPingPongs
func NewGetTotalPingPongsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/totalPingPongs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTotalPingsRequest generates requests for GetTotalPings
func NewGetTotalPingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/totalPings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTotalPongsRequest generates requests for GetTotalPongs
func NewGetTotalPongsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics/totalPongs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingsRequest generates requests for GetPings
func NewGetPingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping-pong/pings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPongsRequest generates requests for GetPongs
func NewGetPongsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping-pong/pongs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFindAllPingPongsRequest generates requests for GetFindAllPingPongs
func NewGetFindAllPingPongsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping-pongs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingPongRequest calls the generic PingPong builder with application/json body
func NewPingPongRequest(server string, body PingPongJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPingPongRequestWithBody(server, "application/json", bodyReader)
}

// NewPingPongRequestWithBody generates requests for PingPong with any type of body
func NewPingPongRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping-pongs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDailyDistributionWithResponse request
	GetDailyDistributionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDailyDistributionResponse, error)

	// GetTotalPingPongsWithResponse request
	GetTotalPingPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPingPongsResponse, error)

	// GetTotalPingsWithResponse request
	GetTotalPingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPingsResponse, error)

	// GetTotalPongsWithResponse request
	GetTotalPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPongsResponse, error)

	// GetPingsWithResponse request
	GetPingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingsResponse, error)

	// GetPongsWithResponse request
	GetPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPongsResponse, error)

	// GetFindAllPingPongsWithResponse request
	GetFindAllPingPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFindAllPingPongsResponse, error)

	// PingPongWithBodyWithResponse request with any body
	PingPongWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PingPongResponse, error)

	PingPongWithResponse(ctx context.Context, body PingPongJSONRequestBody, reqEditors ...RequestEditorFn) (*PingPongResponse, error)
}

type GetDailyDistributionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trend
	XML200       *int
}

// Status returns HTTPResponse.Status
func (r GetDailyDistributionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDailyDistributionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTotalPingPongsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	XML200       *int
}

// Status returns HTTPResponse.Status
func (r GetTotalPingPongsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTotalPingPongsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTotalPingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	XML200       *int
}

// Status returns HTTPResponse.Status
func (r GetTotalPingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTotalPingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTotalPongsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	XML200       *int
}

// Status returns HTTPResponse.Status
func (r GetTotalPongsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTotalPongsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingPongs
	XML200       *PingPongs
}

// Status returns HTTPResponse.Status
func (r GetPingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPongsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingPongs
	XML200       *PingPongs
}

// Status returns HTTPResponse.Status
func (r GetPongsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPongsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFindAllPingPongsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingPongsRaw
	XML200       *PingPongsRaw
}

// Status returns HTTPResponse.Status
func (r GetFindAllPingPongsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFindAllPingPongsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingPongResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingPong
	XML200       *PingPong
}

// Status returns HTTPResponse.Status
func (r PingPongResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingPongResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDailyDistributionWithResponse request returning *GetDailyDistributionResponse
func (c *ClientWithResponses) GetDailyDistributionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDailyDistributionResponse, error) {
	rsp, err := c.GetDailyDistribution(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDailyDistributionResponse(rsp)
}

// GetTotalPingPongsWithResponse request returning *GetTotalPingPongsResponse
func (c *ClientWithResponses) GetTotalPingPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPingPongsResponse, error) {
	rsp, err := c.GetTotalPingPongs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTotalPingPongsResponse(rsp)
}

// GetTotalPingsWithResponse request returning *GetTotalPingsResponse
func (c *ClientWithResponses) GetTotalPingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPingsResponse, error) {
	rsp, err := c.GetTotalPings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTotalPingsResponse(rsp)
}

// GetTotalPongsWithResponse request returning *GetTotalPongsResponse
func (c *ClientWithResponses) GetTotalPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTotalPongsResponse, error) {
	rsp, err := c.GetTotalPongs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTotalPongsResponse(rsp)
}

// GetPingsWithResponse request returning *GetPingsResponse
func (c *ClientWithResponses) GetPingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingsResponse, error) {
	rsp, err := c.GetPings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingsResponse(rsp)
}

// GetPongsWithResponse request returning *GetPongsResponse
func (c *ClientWithResponses) GetPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPongsResponse, error) {
	rsp, err := c.GetPongs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPongsResponse(rsp)
}

// GetFindAllPingPongsWithResponse request returning *GetFindAllPingPongsResponse
func (c *ClientWithResponses) GetFindAllPingPongsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFindAllPingPongsResponse, error) {
	rsp, err := c.GetFindAllPingPongs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFindAllPingPongsResponse(rsp)
}

// PingPongWithBodyWithResponse request with arbitrary body returning *PingPongResponse
func (c *ClientWithResponses) PingPongWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PingPongResponse, error) {
	rsp, err := c.PingPongWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingPongResponse(rsp)
}

func (c *ClientWithResponses) PingPongWithResponse(ctx context.Context, body PingPongJSONRequestBody, reqEditors ...RequestEditorFn) (*PingPongResponse, error) {
	rsp, err := c.PingPong(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingPongResponse(rsp)
}

// ParseGetDailyDistributionResponse parses an HTTP response from a GetDailyDistributionWithResponse call
func ParseGetDailyDistributionResponse(rsp *http.Response) (*GetDailyDistributionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDailyDistributionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest int
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetTotalPingPongsResponse parses an HTTP response from a GetTotalPingPongsWithResponse call
func ParseGetTotalPingPongsResponse(rsp *http.Response) (*GetTotalPingPongsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTotalPingPongsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest int
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetTotalPingsResponse parses an HTTP response from a GetTotalPingsWithResponse call
func ParseGetTotalPingsResponse(rsp *http.Response) (*GetTotalPingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTotalPingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest int
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetTotalPongsResponse parses an HTTP response from a GetTotalPongsWithResponse call
func ParseGetTotalPongsResponse(rsp *http.Response) (*GetTotalPongsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTotalPongsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest int
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetPingsResponse parses an HTTP response from a GetPingsWithResponse call
func ParseGetPingsResponse(rsp *http.Response) (*GetPingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingPongs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PingPongs
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetPongsResponse parses an HTTP response from a GetPongsWithResponse call
func ParseGetPongsResponse(rsp *http.Response) (*GetPongsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPongsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingPongs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PingPongs
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetFindAllPingPongsResponse parses an HTTP response from a GetFindAllPingPongsWithResponse call
func ParseGetFindAllPingPongsResponse(rsp *http.Response) (*GetFindAllPingPongsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFindAllPingPongsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingPongsRaw
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PingPongsRaw
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePingPongResponse parses an HTTP response from a PingPongWithResponse call
func ParsePingPongResponse(rsp *http.Response) (*PingPongResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingPongResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingPong
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest PingPong
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}
