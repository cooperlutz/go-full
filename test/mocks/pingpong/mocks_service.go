// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/cooperlutz/go-full/internal/pingpong/app/command"
	"github.com/cooperlutz/go-full/internal/pingpong/app/query"
	"github.com/cooperlutz/go-full/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIPingPongService creates a new instance of MockIPingPongService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPingPongService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPingPongService {
	mock := &MockIPingPongService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPingPongService is an autogenerated mock type for the IPingPongService type
type MockIPingPongService struct {
	mock.Mock
}

type MockIPingPongService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPingPongService) EXPECT() *MockIPingPongService_Expecter {
	return &MockIPingPongService_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) FindAll(ctx context.Context) (query.FindAllQueryResponseRaw, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 query.FindAllQueryResponseRaw
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (query.FindAllQueryResponseRaw, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) query.FindAllQueryResponseRaw); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(query.FindAllQueryResponseRaw)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockIPingPongService_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) FindAll(ctx interface{}) *MockIPingPongService_FindAll_Call {
	return &MockIPingPongService_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockIPingPongService_FindAll_Call) Run(run func(ctx context.Context)) *MockIPingPongService_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_FindAll_Call) Return(findAllQueryResponseRaw query.FindAllQueryResponseRaw, err error) *MockIPingPongService_FindAll_Call {
	_c.Call.Return(findAllQueryResponseRaw, err)
	return _c
}

func (_c *MockIPingPongService_FindAll_Call) RunAndReturn(run func(ctx context.Context) (query.FindAllQueryResponseRaw, error)) *MockIPingPongService_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPings provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) FindAllPings(ctx context.Context) (query.FindAllQueryResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPings")
	}

	var r0 query.FindAllQueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (query.FindAllQueryResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) query.FindAllQueryResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(query.FindAllQueryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_FindAllPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPings'
type MockIPingPongService_FindAllPings_Call struct {
	*mock.Call
}

// FindAllPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) FindAllPings(ctx interface{}) *MockIPingPongService_FindAllPings_Call {
	return &MockIPingPongService_FindAllPings_Call{Call: _e.mock.On("FindAllPings", ctx)}
}

func (_c *MockIPingPongService_FindAllPings_Call) Run(run func(ctx context.Context)) *MockIPingPongService_FindAllPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_FindAllPings_Call) Return(findAllQueryResponse query.FindAllQueryResponse, err error) *MockIPingPongService_FindAllPings_Call {
	_c.Call.Return(findAllQueryResponse, err)
	return _c
}

func (_c *MockIPingPongService_FindAllPings_Call) RunAndReturn(run func(ctx context.Context) (query.FindAllQueryResponse, error)) *MockIPingPongService_FindAllPings_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPongs provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) FindAllPongs(ctx context.Context) (query.FindAllQueryResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPongs")
	}

	var r0 query.FindAllQueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (query.FindAllQueryResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) query.FindAllQueryResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(query.FindAllQueryResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_FindAllPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPongs'
type MockIPingPongService_FindAllPongs_Call struct {
	*mock.Call
}

// FindAllPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) FindAllPongs(ctx interface{}) *MockIPingPongService_FindAllPongs_Call {
	return &MockIPingPongService_FindAllPongs_Call{Call: _e.mock.On("FindAllPongs", ctx)}
}

func (_c *MockIPingPongService_FindAllPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongService_FindAllPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_FindAllPongs_Call) Return(findAllQueryResponse query.FindAllQueryResponse, err error) *MockIPingPongService_FindAllPongs_Call {
	_c.Call.Return(findAllQueryResponse, err)
	return _c
}

func (_c *MockIPingPongService_FindAllPongs_Call) RunAndReturn(run func(ctx context.Context) (query.FindAllQueryResponse, error)) *MockIPingPongService_FindAllPongs_Call {
	_c.Call.Return(run)
	return _c
}

// PingPong provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) PingPong(ctx context.Context, cmd command.PingPongCommand) (command.PingPongCommandResult, error) {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for PingPong")
	}

	var r0 command.PingPongCommandResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.PingPongCommand) (command.PingPongCommandResult, error)); ok {
		return returnFunc(ctx, cmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.PingPongCommand) command.PingPongCommandResult); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Get(0).(command.PingPongCommandResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, command.PingPongCommand) error); ok {
		r1 = returnFunc(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_PingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingPong'
type MockIPingPongService_PingPong_Call struct {
	*mock.Call
}

// PingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.PingPongCommand
func (_e *MockIPingPongService_Expecter) PingPong(ctx interface{}, cmd interface{}) *MockIPingPongService_PingPong_Call {
	return &MockIPingPongService_PingPong_Call{Call: _e.mock.On("PingPong", ctx, cmd)}
}

func (_c *MockIPingPongService_PingPong_Call) Run(run func(ctx context.Context, cmd command.PingPongCommand)) *MockIPingPongService_PingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 command.PingPongCommand
		if args[1] != nil {
			arg1 = args[1].(command.PingPongCommand)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPingPongService_PingPong_Call) Return(pingPongCommandResult command.PingPongCommandResult, err error) *MockIPingPongService_PingPong_Call {
	_c.Call.Return(pingPongCommandResult, err)
	return _c
}

func (_c *MockIPingPongService_PingPong_Call) RunAndReturn(run func(ctx context.Context, cmd command.PingPongCommand) (command.PingPongCommandResult, error)) *MockIPingPongService_PingPong_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongs provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) TotalNumberOfPingPongs(ctx context.Context) (types.QuantityMetric, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongs")
	}

	var r0 types.QuantityMetric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (types.QuantityMetric, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) types.QuantityMetric); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(types.QuantityMetric)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_TotalNumberOfPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongs'
type MockIPingPongService_TotalNumberOfPingPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) TotalNumberOfPingPongs(ctx interface{}) *MockIPingPongService_TotalNumberOfPingPongs_Call {
	return &MockIPingPongService_TotalNumberOfPingPongs_Call{Call: _e.mock.On("TotalNumberOfPingPongs", ctx)}
}

func (_c *MockIPingPongService_TotalNumberOfPingPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongService_TotalNumberOfPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPingPongs_Call) Return(quantityMetric types.QuantityMetric, err error) *MockIPingPongService_TotalNumberOfPingPongs_Call {
	_c.Call.Return(quantityMetric, err)
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPingPongs_Call) RunAndReturn(run func(ctx context.Context) (types.QuantityMetric, error)) *MockIPingPongService_TotalNumberOfPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongsPerDay provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) TotalNumberOfPingPongsPerDay(ctx context.Context) ([]types.MeasureCountbyDateTimeMetric, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongsPerDay")
	}

	var r0 []types.MeasureCountbyDateTimeMetric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]types.MeasureCountbyDateTimeMetric, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []types.MeasureCountbyDateTimeMetric); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MeasureCountbyDateTimeMetric)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_TotalNumberOfPingPongsPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongsPerDay'
type MockIPingPongService_TotalNumberOfPingPongsPerDay_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongsPerDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) TotalNumberOfPingPongsPerDay(ctx interface{}) *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call {
	return &MockIPingPongService_TotalNumberOfPingPongsPerDay_Call{Call: _e.mock.On("TotalNumberOfPingPongsPerDay", ctx)}
}

func (_c *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call) Run(run func(ctx context.Context)) *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call) Return(measureCountbyDateTimeMetrics []types.MeasureCountbyDateTimeMetric, err error) *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call {
	_c.Call.Return(measureCountbyDateTimeMetrics, err)
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call) RunAndReturn(run func(ctx context.Context) ([]types.MeasureCountbyDateTimeMetric, error)) *MockIPingPongService_TotalNumberOfPingPongsPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPings provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) TotalNumberOfPings(ctx context.Context) (types.QuantityMetric, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPings")
	}

	var r0 types.QuantityMetric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (types.QuantityMetric, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) types.QuantityMetric); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(types.QuantityMetric)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_TotalNumberOfPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPings'
type MockIPingPongService_TotalNumberOfPings_Call struct {
	*mock.Call
}

// TotalNumberOfPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) TotalNumberOfPings(ctx interface{}) *MockIPingPongService_TotalNumberOfPings_Call {
	return &MockIPingPongService_TotalNumberOfPings_Call{Call: _e.mock.On("TotalNumberOfPings", ctx)}
}

func (_c *MockIPingPongService_TotalNumberOfPings_Call) Run(run func(ctx context.Context)) *MockIPingPongService_TotalNumberOfPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPings_Call) Return(quantityMetric types.QuantityMetric, err error) *MockIPingPongService_TotalNumberOfPings_Call {
	_c.Call.Return(quantityMetric, err)
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPings_Call) RunAndReturn(run func(ctx context.Context) (types.QuantityMetric, error)) *MockIPingPongService_TotalNumberOfPings_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPongs provides a mock function for the type MockIPingPongService
func (_mock *MockIPingPongService) TotalNumberOfPongs(ctx context.Context) (types.QuantityMetric, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPongs")
	}

	var r0 types.QuantityMetric
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (types.QuantityMetric, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) types.QuantityMetric); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(types.QuantityMetric)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongService_TotalNumberOfPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPongs'
type MockIPingPongService_TotalNumberOfPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongService_Expecter) TotalNumberOfPongs(ctx interface{}) *MockIPingPongService_TotalNumberOfPongs_Call {
	return &MockIPingPongService_TotalNumberOfPongs_Call{Call: _e.mock.On("TotalNumberOfPongs", ctx)}
}

func (_c *MockIPingPongService_TotalNumberOfPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongService_TotalNumberOfPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPongs_Call) Return(quantityMetric types.QuantityMetric, err error) *MockIPingPongService_TotalNumberOfPongs_Call {
	_c.Call.Return(quantityMetric, err)
	return _c
}

func (_c *MockIPingPongService_TotalNumberOfPongs_Call) RunAndReturn(run func(ctx context.Context) (types.QuantityMetric, error)) *MockIPingPongService_TotalNumberOfPongs_Call {
	_c.Call.Return(run)
	return _c
}
