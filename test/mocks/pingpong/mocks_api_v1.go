// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	"github.com/cooperlutz/go-full/internal/pingpong/api/rest/v1/server"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServerInterface creates a new instance of MockServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInterface {
	mock := &MockServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServerInterface is an autogenerated mock type for the ServerInterface type
type MockServerInterface struct {
	mock.Mock
}

type MockServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInterface) EXPECT() *MockServerInterface_Expecter {
	return &MockServerInterface_Expecter{mock: &_m.Mock}
}

// GetDailyDistribution provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetDailyDistribution(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetDailyDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDailyDistribution'
type MockServerInterface_GetDailyDistribution_Call struct {
	*mock.Call
}

// GetDailyDistribution is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetDailyDistribution(w interface{}, r interface{}) *MockServerInterface_GetDailyDistribution_Call {
	return &MockServerInterface_GetDailyDistribution_Call{Call: _e.mock.On("GetDailyDistribution", w, r)}
}

func (_c *MockServerInterface_GetDailyDistribution_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetDailyDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetDailyDistribution_Call) Return() *MockServerInterface_GetDailyDistribution_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetDailyDistribution_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetDailyDistribution_Call {
	_c.Run(run)
	return _c
}

// GetFindAllPingPongs provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetFindAllPingPongs(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetFindAllPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindAllPingPongs'
type MockServerInterface_GetFindAllPingPongs_Call struct {
	*mock.Call
}

// GetFindAllPingPongs is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetFindAllPingPongs(w interface{}, r interface{}) *MockServerInterface_GetFindAllPingPongs_Call {
	return &MockServerInterface_GetFindAllPingPongs_Call{Call: _e.mock.On("GetFindAllPingPongs", w, r)}
}

func (_c *MockServerInterface_GetFindAllPingPongs_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetFindAllPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetFindAllPingPongs_Call) Return() *MockServerInterface_GetFindAllPingPongs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetFindAllPingPongs_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetFindAllPingPongs_Call {
	_c.Run(run)
	return _c
}

// GetPings provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetPings(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPings'
type MockServerInterface_GetPings_Call struct {
	*mock.Call
}

// GetPings is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetPings(w interface{}, r interface{}) *MockServerInterface_GetPings_Call {
	return &MockServerInterface_GetPings_Call{Call: _e.mock.On("GetPings", w, r)}
}

func (_c *MockServerInterface_GetPings_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetPings_Call) Return() *MockServerInterface_GetPings_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetPings_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetPings_Call {
	_c.Run(run)
	return _c
}

// GetPongs provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetPongs(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPongs'
type MockServerInterface_GetPongs_Call struct {
	*mock.Call
}

// GetPongs is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetPongs(w interface{}, r interface{}) *MockServerInterface_GetPongs_Call {
	return &MockServerInterface_GetPongs_Call{Call: _e.mock.On("GetPongs", w, r)}
}

func (_c *MockServerInterface_GetPongs_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetPongs_Call) Return() *MockServerInterface_GetPongs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetPongs_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetPongs_Call {
	_c.Run(run)
	return _c
}

// GetTotalPingPongs provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetTotalPingPongs(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetTotalPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPingPongs'
type MockServerInterface_GetTotalPingPongs_Call struct {
	*mock.Call
}

// GetTotalPingPongs is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetTotalPingPongs(w interface{}, r interface{}) *MockServerInterface_GetTotalPingPongs_Call {
	return &MockServerInterface_GetTotalPingPongs_Call{Call: _e.mock.On("GetTotalPingPongs", w, r)}
}

func (_c *MockServerInterface_GetTotalPingPongs_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetTotalPingPongs_Call) Return() *MockServerInterface_GetTotalPingPongs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetTotalPingPongs_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPingPongs_Call {
	_c.Run(run)
	return _c
}

// GetTotalPings provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetTotalPings(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetTotalPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPings'
type MockServerInterface_GetTotalPings_Call struct {
	*mock.Call
}

// GetTotalPings is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetTotalPings(w interface{}, r interface{}) *MockServerInterface_GetTotalPings_Call {
	return &MockServerInterface_GetTotalPings_Call{Call: _e.mock.On("GetTotalPings", w, r)}
}

func (_c *MockServerInterface_GetTotalPings_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetTotalPings_Call) Return() *MockServerInterface_GetTotalPings_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetTotalPings_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPings_Call {
	_c.Run(run)
	return _c
}

// GetTotalPongs provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) GetTotalPongs(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_GetTotalPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPongs'
type MockServerInterface_GetTotalPongs_Call struct {
	*mock.Call
}

// GetTotalPongs is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) GetTotalPongs(w interface{}, r interface{}) *MockServerInterface_GetTotalPongs_Call {
	return &MockServerInterface_GetTotalPongs_Call{Call: _e.mock.On("GetTotalPongs", w, r)}
}

func (_c *MockServerInterface_GetTotalPongs_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_GetTotalPongs_Call) Return() *MockServerInterface_GetTotalPongs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_GetTotalPongs_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_GetTotalPongs_Call {
	_c.Run(run)
	return _c
}

// PingPong provides a mock function for the type MockServerInterface
func (_mock *MockServerInterface) PingPong(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockServerInterface_PingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingPong'
type MockServerInterface_PingPong_Call struct {
	*mock.Call
}

// PingPong is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockServerInterface_Expecter) PingPong(w interface{}, r interface{}) *MockServerInterface_PingPong_Call {
	return &MockServerInterface_PingPong_Call{Call: _e.mock.On("PingPong", w, r)}
}

func (_c *MockServerInterface_PingPong_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServerInterface_PingPong_Call) Return() *MockServerInterface_PingPong_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInterface_PingPong_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockServerInterface_PingPong_Call {
	_c.Run(run)
	return _c
}

// NewMockGetDailyDistributionResponseObject creates a new instance of MockGetDailyDistributionResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetDailyDistributionResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetDailyDistributionResponseObject {
	mock := &MockGetDailyDistributionResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetDailyDistributionResponseObject is an autogenerated mock type for the GetDailyDistributionResponseObject type
type MockGetDailyDistributionResponseObject struct {
	mock.Mock
}

type MockGetDailyDistributionResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetDailyDistributionResponseObject) EXPECT() *MockGetDailyDistributionResponseObject_Expecter {
	return &MockGetDailyDistributionResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetDailyDistributionResponse provides a mock function for the type MockGetDailyDistributionResponseObject
func (_mock *MockGetDailyDistributionResponseObject) VisitGetDailyDistributionResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetDailyDistributionResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetDailyDistributionResponse'
type MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call struct {
	*mock.Call
}

// VisitGetDailyDistributionResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetDailyDistributionResponseObject_Expecter) VisitGetDailyDistributionResponse(w interface{}) *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call {
	return &MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call{Call: _e.mock.On("VisitGetDailyDistributionResponse", w)}
}

func (_c *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call) Return(err error) *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetDailyDistributionResponseObject_VisitGetDailyDistributionResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetTotalPingPongsResponseObject creates a new instance of MockGetTotalPingPongsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetTotalPingPongsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetTotalPingPongsResponseObject {
	mock := &MockGetTotalPingPongsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetTotalPingPongsResponseObject is an autogenerated mock type for the GetTotalPingPongsResponseObject type
type MockGetTotalPingPongsResponseObject struct {
	mock.Mock
}

type MockGetTotalPingPongsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetTotalPingPongsResponseObject) EXPECT() *MockGetTotalPingPongsResponseObject_Expecter {
	return &MockGetTotalPingPongsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetTotalPingPongsResponse provides a mock function for the type MockGetTotalPingPongsResponseObject
func (_mock *MockGetTotalPingPongsResponseObject) VisitGetTotalPingPongsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetTotalPingPongsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetTotalPingPongsResponse'
type MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call struct {
	*mock.Call
}

// VisitGetTotalPingPongsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetTotalPingPongsResponseObject_Expecter) VisitGetTotalPingPongsResponse(w interface{}) *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call {
	return &MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call{Call: _e.mock.On("VisitGetTotalPingPongsResponse", w)}
}

func (_c *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call) Return(err error) *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetTotalPingPongsResponseObject_VisitGetTotalPingPongsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetTotalPingsResponseObject creates a new instance of MockGetTotalPingsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetTotalPingsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetTotalPingsResponseObject {
	mock := &MockGetTotalPingsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetTotalPingsResponseObject is an autogenerated mock type for the GetTotalPingsResponseObject type
type MockGetTotalPingsResponseObject struct {
	mock.Mock
}

type MockGetTotalPingsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetTotalPingsResponseObject) EXPECT() *MockGetTotalPingsResponseObject_Expecter {
	return &MockGetTotalPingsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetTotalPingsResponse provides a mock function for the type MockGetTotalPingsResponseObject
func (_mock *MockGetTotalPingsResponseObject) VisitGetTotalPingsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetTotalPingsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetTotalPingsResponse'
type MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call struct {
	*mock.Call
}

// VisitGetTotalPingsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetTotalPingsResponseObject_Expecter) VisitGetTotalPingsResponse(w interface{}) *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call {
	return &MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call{Call: _e.mock.On("VisitGetTotalPingsResponse", w)}
}

func (_c *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call) Return(err error) *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetTotalPingsResponseObject_VisitGetTotalPingsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetTotalPongsResponseObject creates a new instance of MockGetTotalPongsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetTotalPongsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetTotalPongsResponseObject {
	mock := &MockGetTotalPongsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetTotalPongsResponseObject is an autogenerated mock type for the GetTotalPongsResponseObject type
type MockGetTotalPongsResponseObject struct {
	mock.Mock
}

type MockGetTotalPongsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetTotalPongsResponseObject) EXPECT() *MockGetTotalPongsResponseObject_Expecter {
	return &MockGetTotalPongsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetTotalPongsResponse provides a mock function for the type MockGetTotalPongsResponseObject
func (_mock *MockGetTotalPongsResponseObject) VisitGetTotalPongsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetTotalPongsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetTotalPongsResponse'
type MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call struct {
	*mock.Call
}

// VisitGetTotalPongsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetTotalPongsResponseObject_Expecter) VisitGetTotalPongsResponse(w interface{}) *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call {
	return &MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call{Call: _e.mock.On("VisitGetTotalPongsResponse", w)}
}

func (_c *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call) Return(err error) *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetTotalPongsResponseObject_VisitGetTotalPongsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetPingsResponseObject creates a new instance of MockGetPingsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetPingsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetPingsResponseObject {
	mock := &MockGetPingsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetPingsResponseObject is an autogenerated mock type for the GetPingsResponseObject type
type MockGetPingsResponseObject struct {
	mock.Mock
}

type MockGetPingsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetPingsResponseObject) EXPECT() *MockGetPingsResponseObject_Expecter {
	return &MockGetPingsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetPingsResponse provides a mock function for the type MockGetPingsResponseObject
func (_mock *MockGetPingsResponseObject) VisitGetPingsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetPingsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetPingsResponseObject_VisitGetPingsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetPingsResponse'
type MockGetPingsResponseObject_VisitGetPingsResponse_Call struct {
	*mock.Call
}

// VisitGetPingsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetPingsResponseObject_Expecter) VisitGetPingsResponse(w interface{}) *MockGetPingsResponseObject_VisitGetPingsResponse_Call {
	return &MockGetPingsResponseObject_VisitGetPingsResponse_Call{Call: _e.mock.On("VisitGetPingsResponse", w)}
}

func (_c *MockGetPingsResponseObject_VisitGetPingsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetPingsResponseObject_VisitGetPingsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetPingsResponseObject_VisitGetPingsResponse_Call) Return(err error) *MockGetPingsResponseObject_VisitGetPingsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetPingsResponseObject_VisitGetPingsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetPingsResponseObject_VisitGetPingsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetPongsResponseObject creates a new instance of MockGetPongsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetPongsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetPongsResponseObject {
	mock := &MockGetPongsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetPongsResponseObject is an autogenerated mock type for the GetPongsResponseObject type
type MockGetPongsResponseObject struct {
	mock.Mock
}

type MockGetPongsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetPongsResponseObject) EXPECT() *MockGetPongsResponseObject_Expecter {
	return &MockGetPongsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetPongsResponse provides a mock function for the type MockGetPongsResponseObject
func (_mock *MockGetPongsResponseObject) VisitGetPongsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetPongsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetPongsResponseObject_VisitGetPongsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetPongsResponse'
type MockGetPongsResponseObject_VisitGetPongsResponse_Call struct {
	*mock.Call
}

// VisitGetPongsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetPongsResponseObject_Expecter) VisitGetPongsResponse(w interface{}) *MockGetPongsResponseObject_VisitGetPongsResponse_Call {
	return &MockGetPongsResponseObject_VisitGetPongsResponse_Call{Call: _e.mock.On("VisitGetPongsResponse", w)}
}

func (_c *MockGetPongsResponseObject_VisitGetPongsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetPongsResponseObject_VisitGetPongsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetPongsResponseObject_VisitGetPongsResponse_Call) Return(err error) *MockGetPongsResponseObject_VisitGetPongsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetPongsResponseObject_VisitGetPongsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetPongsResponseObject_VisitGetPongsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetFindAllPingPongsResponseObject creates a new instance of MockGetFindAllPingPongsResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetFindAllPingPongsResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetFindAllPingPongsResponseObject {
	mock := &MockGetFindAllPingPongsResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetFindAllPingPongsResponseObject is an autogenerated mock type for the GetFindAllPingPongsResponseObject type
type MockGetFindAllPingPongsResponseObject struct {
	mock.Mock
}

type MockGetFindAllPingPongsResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetFindAllPingPongsResponseObject) EXPECT() *MockGetFindAllPingPongsResponseObject_Expecter {
	return &MockGetFindAllPingPongsResponseObject_Expecter{mock: &_m.Mock}
}

// VisitGetFindAllPingPongsResponse provides a mock function for the type MockGetFindAllPingPongsResponseObject
func (_mock *MockGetFindAllPingPongsResponseObject) VisitGetFindAllPingPongsResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitGetFindAllPingPongsResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitGetFindAllPingPongsResponse'
type MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call struct {
	*mock.Call
}

// VisitGetFindAllPingPongsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockGetFindAllPingPongsResponseObject_Expecter) VisitGetFindAllPingPongsResponse(w interface{}) *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call {
	return &MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call{Call: _e.mock.On("VisitGetFindAllPingPongsResponse", w)}
}

func (_c *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call) Run(run func(w http.ResponseWriter)) *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call) Return(err error) *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockGetFindAllPingPongsResponseObject_VisitGetFindAllPingPongsResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPingPongResponseObject creates a new instance of MockPingPongResponseObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPingPongResponseObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPingPongResponseObject {
	mock := &MockPingPongResponseObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPingPongResponseObject is an autogenerated mock type for the PingPongResponseObject type
type MockPingPongResponseObject struct {
	mock.Mock
}

type MockPingPongResponseObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPingPongResponseObject) EXPECT() *MockPingPongResponseObject_Expecter {
	return &MockPingPongResponseObject_Expecter{mock: &_m.Mock}
}

// VisitPingPongResponse provides a mock function for the type MockPingPongResponseObject
func (_mock *MockPingPongResponseObject) VisitPingPongResponse(w http.ResponseWriter) error {
	ret := _mock.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for VisitPingPongResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter) error); ok {
		r0 = returnFunc(w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPingPongResponseObject_VisitPingPongResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitPingPongResponse'
type MockPingPongResponseObject_VisitPingPongResponse_Call struct {
	*mock.Call
}

// VisitPingPongResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockPingPongResponseObject_Expecter) VisitPingPongResponse(w interface{}) *MockPingPongResponseObject_VisitPingPongResponse_Call {
	return &MockPingPongResponseObject_VisitPingPongResponse_Call{Call: _e.mock.On("VisitPingPongResponse", w)}
}

func (_c *MockPingPongResponseObject_VisitPingPongResponse_Call) Run(run func(w http.ResponseWriter)) *MockPingPongResponseObject_VisitPingPongResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPingPongResponseObject_VisitPingPongResponse_Call) Return(err error) *MockPingPongResponseObject_VisitPingPongResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPingPongResponseObject_VisitPingPongResponse_Call) RunAndReturn(run func(w http.ResponseWriter) error) *MockPingPongResponseObject_VisitPingPongResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStrictServerInterface creates a new instance of MockStrictServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStrictServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStrictServerInterface {
	mock := &MockStrictServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStrictServerInterface is an autogenerated mock type for the StrictServerInterface type
type MockStrictServerInterface struct {
	mock.Mock
}

type MockStrictServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStrictServerInterface) EXPECT() *MockStrictServerInterface_Expecter {
	return &MockStrictServerInterface_Expecter{mock: &_m.Mock}
}

// GetDailyDistribution provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetDailyDistribution(ctx context.Context, request server.GetDailyDistributionRequestObject) (server.GetDailyDistributionResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyDistribution")
	}

	var r0 server.GetDailyDistributionResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetDailyDistributionRequestObject) (server.GetDailyDistributionResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetDailyDistributionRequestObject) server.GetDailyDistributionResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetDailyDistributionResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetDailyDistributionRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetDailyDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDailyDistribution'
type MockStrictServerInterface_GetDailyDistribution_Call struct {
	*mock.Call
}

// GetDailyDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetDailyDistributionRequestObject
func (_e *MockStrictServerInterface_Expecter) GetDailyDistribution(ctx interface{}, request interface{}) *MockStrictServerInterface_GetDailyDistribution_Call {
	return &MockStrictServerInterface_GetDailyDistribution_Call{Call: _e.mock.On("GetDailyDistribution", ctx, request)}
}

func (_c *MockStrictServerInterface_GetDailyDistribution_Call) Run(run func(ctx context.Context, request server.GetDailyDistributionRequestObject)) *MockStrictServerInterface_GetDailyDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetDailyDistributionRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetDailyDistributionRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetDailyDistribution_Call) Return(getDailyDistributionResponseObject server.GetDailyDistributionResponseObject, err error) *MockStrictServerInterface_GetDailyDistribution_Call {
	_c.Call.Return(getDailyDistributionResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetDailyDistribution_Call) RunAndReturn(run func(ctx context.Context, request server.GetDailyDistributionRequestObject) (server.GetDailyDistributionResponseObject, error)) *MockStrictServerInterface_GetDailyDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindAllPingPongs provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetFindAllPingPongs(ctx context.Context, request server.GetFindAllPingPongsRequestObject) (server.GetFindAllPingPongsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFindAllPingPongs")
	}

	var r0 server.GetFindAllPingPongsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetFindAllPingPongsRequestObject) (server.GetFindAllPingPongsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetFindAllPingPongsRequestObject) server.GetFindAllPingPongsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetFindAllPingPongsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetFindAllPingPongsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetFindAllPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindAllPingPongs'
type MockStrictServerInterface_GetFindAllPingPongs_Call struct {
	*mock.Call
}

// GetFindAllPingPongs is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetFindAllPingPongsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetFindAllPingPongs(ctx interface{}, request interface{}) *MockStrictServerInterface_GetFindAllPingPongs_Call {
	return &MockStrictServerInterface_GetFindAllPingPongs_Call{Call: _e.mock.On("GetFindAllPingPongs", ctx, request)}
}

func (_c *MockStrictServerInterface_GetFindAllPingPongs_Call) Run(run func(ctx context.Context, request server.GetFindAllPingPongsRequestObject)) *MockStrictServerInterface_GetFindAllPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetFindAllPingPongsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetFindAllPingPongsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetFindAllPingPongs_Call) Return(getFindAllPingPongsResponseObject server.GetFindAllPingPongsResponseObject, err error) *MockStrictServerInterface_GetFindAllPingPongs_Call {
	_c.Call.Return(getFindAllPingPongsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetFindAllPingPongs_Call) RunAndReturn(run func(ctx context.Context, request server.GetFindAllPingPongsRequestObject) (server.GetFindAllPingPongsResponseObject, error)) *MockStrictServerInterface_GetFindAllPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPings provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetPings(ctx context.Context, request server.GetPingsRequestObject) (server.GetPingsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPings")
	}

	var r0 server.GetPingsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetPingsRequestObject) (server.GetPingsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetPingsRequestObject) server.GetPingsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetPingsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetPingsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPings'
type MockStrictServerInterface_GetPings_Call struct {
	*mock.Call
}

// GetPings is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetPingsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetPings(ctx interface{}, request interface{}) *MockStrictServerInterface_GetPings_Call {
	return &MockStrictServerInterface_GetPings_Call{Call: _e.mock.On("GetPings", ctx, request)}
}

func (_c *MockStrictServerInterface_GetPings_Call) Run(run func(ctx context.Context, request server.GetPingsRequestObject)) *MockStrictServerInterface_GetPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetPingsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetPingsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetPings_Call) Return(getPingsResponseObject server.GetPingsResponseObject, err error) *MockStrictServerInterface_GetPings_Call {
	_c.Call.Return(getPingsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetPings_Call) RunAndReturn(run func(ctx context.Context, request server.GetPingsRequestObject) (server.GetPingsResponseObject, error)) *MockStrictServerInterface_GetPings_Call {
	_c.Call.Return(run)
	return _c
}

// GetPongs provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetPongs(ctx context.Context, request server.GetPongsRequestObject) (server.GetPongsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPongs")
	}

	var r0 server.GetPongsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetPongsRequestObject) (server.GetPongsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetPongsRequestObject) server.GetPongsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetPongsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetPongsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPongs'
type MockStrictServerInterface_GetPongs_Call struct {
	*mock.Call
}

// GetPongs is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetPongsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetPongs(ctx interface{}, request interface{}) *MockStrictServerInterface_GetPongs_Call {
	return &MockStrictServerInterface_GetPongs_Call{Call: _e.mock.On("GetPongs", ctx, request)}
}

func (_c *MockStrictServerInterface_GetPongs_Call) Run(run func(ctx context.Context, request server.GetPongsRequestObject)) *MockStrictServerInterface_GetPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetPongsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetPongsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetPongs_Call) Return(getPongsResponseObject server.GetPongsResponseObject, err error) *MockStrictServerInterface_GetPongs_Call {
	_c.Call.Return(getPongsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetPongs_Call) RunAndReturn(run func(ctx context.Context, request server.GetPongsRequestObject) (server.GetPongsResponseObject, error)) *MockStrictServerInterface_GetPongs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalPingPongs provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetTotalPingPongs(ctx context.Context, request server.GetTotalPingPongsRequestObject) (server.GetTotalPingPongsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalPingPongs")
	}

	var r0 server.GetTotalPingPongsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPingPongsRequestObject) (server.GetTotalPingPongsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPingPongsRequestObject) server.GetTotalPingPongsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetTotalPingPongsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetTotalPingPongsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetTotalPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPingPongs'
type MockStrictServerInterface_GetTotalPingPongs_Call struct {
	*mock.Call
}

// GetTotalPingPongs is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetTotalPingPongsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetTotalPingPongs(ctx interface{}, request interface{}) *MockStrictServerInterface_GetTotalPingPongs_Call {
	return &MockStrictServerInterface_GetTotalPingPongs_Call{Call: _e.mock.On("GetTotalPingPongs", ctx, request)}
}

func (_c *MockStrictServerInterface_GetTotalPingPongs_Call) Run(run func(ctx context.Context, request server.GetTotalPingPongsRequestObject)) *MockStrictServerInterface_GetTotalPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetTotalPingPongsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetTotalPingPongsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPingPongs_Call) Return(getTotalPingPongsResponseObject server.GetTotalPingPongsResponseObject, err error) *MockStrictServerInterface_GetTotalPingPongs_Call {
	_c.Call.Return(getTotalPingPongsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPingPongs_Call) RunAndReturn(run func(ctx context.Context, request server.GetTotalPingPongsRequestObject) (server.GetTotalPingPongsResponseObject, error)) *MockStrictServerInterface_GetTotalPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalPings provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetTotalPings(ctx context.Context, request server.GetTotalPingsRequestObject) (server.GetTotalPingsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalPings")
	}

	var r0 server.GetTotalPingsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPingsRequestObject) (server.GetTotalPingsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPingsRequestObject) server.GetTotalPingsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetTotalPingsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetTotalPingsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetTotalPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPings'
type MockStrictServerInterface_GetTotalPings_Call struct {
	*mock.Call
}

// GetTotalPings is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetTotalPingsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetTotalPings(ctx interface{}, request interface{}) *MockStrictServerInterface_GetTotalPings_Call {
	return &MockStrictServerInterface_GetTotalPings_Call{Call: _e.mock.On("GetTotalPings", ctx, request)}
}

func (_c *MockStrictServerInterface_GetTotalPings_Call) Run(run func(ctx context.Context, request server.GetTotalPingsRequestObject)) *MockStrictServerInterface_GetTotalPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetTotalPingsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetTotalPingsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPings_Call) Return(getTotalPingsResponseObject server.GetTotalPingsResponseObject, err error) *MockStrictServerInterface_GetTotalPings_Call {
	_c.Call.Return(getTotalPingsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPings_Call) RunAndReturn(run func(ctx context.Context, request server.GetTotalPingsRequestObject) (server.GetTotalPingsResponseObject, error)) *MockStrictServerInterface_GetTotalPings_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalPongs provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) GetTotalPongs(ctx context.Context, request server.GetTotalPongsRequestObject) (server.GetTotalPongsResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalPongs")
	}

	var r0 server.GetTotalPongsResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPongsRequestObject) (server.GetTotalPongsResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.GetTotalPongsRequestObject) server.GetTotalPongsResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.GetTotalPongsResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.GetTotalPongsRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_GetTotalPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalPongs'
type MockStrictServerInterface_GetTotalPongs_Call struct {
	*mock.Call
}

// GetTotalPongs is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.GetTotalPongsRequestObject
func (_e *MockStrictServerInterface_Expecter) GetTotalPongs(ctx interface{}, request interface{}) *MockStrictServerInterface_GetTotalPongs_Call {
	return &MockStrictServerInterface_GetTotalPongs_Call{Call: _e.mock.On("GetTotalPongs", ctx, request)}
}

func (_c *MockStrictServerInterface_GetTotalPongs_Call) Run(run func(ctx context.Context, request server.GetTotalPongsRequestObject)) *MockStrictServerInterface_GetTotalPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.GetTotalPongsRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.GetTotalPongsRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPongs_Call) Return(getTotalPongsResponseObject server.GetTotalPongsResponseObject, err error) *MockStrictServerInterface_GetTotalPongs_Call {
	_c.Call.Return(getTotalPongsResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_GetTotalPongs_Call) RunAndReturn(run func(ctx context.Context, request server.GetTotalPongsRequestObject) (server.GetTotalPongsResponseObject, error)) *MockStrictServerInterface_GetTotalPongs_Call {
	_c.Call.Return(run)
	return _c
}

// PingPong provides a mock function for the type MockStrictServerInterface
func (_mock *MockStrictServerInterface) PingPong(ctx context.Context, request server.PingPongRequestObject) (server.PingPongResponseObject, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PingPong")
	}

	var r0 server.PingPongResponseObject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.PingPongRequestObject) (server.PingPongResponseObject, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, server.PingPongRequestObject) server.PingPongResponseObject); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.PingPongResponseObject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, server.PingPongRequestObject) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStrictServerInterface_PingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingPong'
type MockStrictServerInterface_PingPong_Call struct {
	*mock.Call
}

// PingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - request server.PingPongRequestObject
func (_e *MockStrictServerInterface_Expecter) PingPong(ctx interface{}, request interface{}) *MockStrictServerInterface_PingPong_Call {
	return &MockStrictServerInterface_PingPong_Call{Call: _e.mock.On("PingPong", ctx, request)}
}

func (_c *MockStrictServerInterface_PingPong_Call) Run(run func(ctx context.Context, request server.PingPongRequestObject)) *MockStrictServerInterface_PingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 server.PingPongRequestObject
		if args[1] != nil {
			arg1 = args[1].(server.PingPongRequestObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStrictServerInterface_PingPong_Call) Return(pingPongResponseObject server.PingPongResponseObject, err error) *MockStrictServerInterface_PingPong_Call {
	_c.Call.Return(pingPongResponseObject, err)
	return _c
}

func (_c *MockStrictServerInterface_PingPong_Call) RunAndReturn(run func(ctx context.Context, request server.PingPongRequestObject) (server.PingPongResponseObject, error)) *MockStrictServerInterface_PingPong_Call {
	_c.Call.Return(run)
	return _c
}
