// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/cooperlutz/go-full/internal/pingpong/infra/persist/postgres"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBTX creates a new instance of MockDBTX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBTX(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBTX {
	mock := &MockDBTX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBTX is an autogenerated mock type for the DBTX type
type MockDBTX struct {
	mock.Mock
}

type MockDBTX_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBTX) EXPECT() *MockDBTX_Expecter {
	return &MockDBTX_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function for the type MockDBTX
func (_mock *MockDBTX) Exec(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)); ok {
		return returnFunc(context1, s, ifaceVals...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgconn.CommandTag); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(context1, s, ifaceVals...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDBTX_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - ifaceVals ...interface{}
func (_e *MockDBTX_Expecter) Exec(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_Exec_Call {
	return &MockDBTX_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_Exec_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBTX_Exec_Call) Return(commandTag pgconn.CommandTag, err error) *MockDBTX_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *MockDBTX_Exec_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) (pgconn.CommandTag, error)) *MockDBTX_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDBTX
func (_mock *MockDBTX) Query(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return returnFunc(context1, s, ifaceVals...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(context1, s, ifaceVals...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDBTX_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - ifaceVals ...interface{}
func (_e *MockDBTX_Expecter) Query(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_Query_Call {
	return &MockDBTX_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_Query_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBTX_Query_Call) Return(rows pgx.Rows, err error) *MockDBTX_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockDBTX_Query_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) (pgx.Rows, error)) *MockDBTX_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDBTX
func (_mock *MockDBTX) QueryRow(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Row); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// MockDBTX_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDBTX_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - ifaceVals ...interface{}
func (_e *MockDBTX_Expecter) QueryRow(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_QueryRow_Call {
	return &MockDBTX_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_QueryRow_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBTX_QueryRow_Call) Return(row pgx.Row) *MockDBTX_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockDBTX_QueryRow_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) pgx.Row) *MockDBTX_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CountPerDay provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CountPerDay(ctx context.Context) ([]persist_postgres.CountPerDayRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountPerDay")
	}

	var r0 []persist_postgres.CountPerDayRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.CountPerDayRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.CountPerDayRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.CountPerDayRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CountPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountPerDay'
type MockQuerier_CountPerDay_Call struct {
	*mock.Call
}

// CountPerDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) CountPerDay(ctx interface{}) *MockQuerier_CountPerDay_Call {
	return &MockQuerier_CountPerDay_Call{Call: _e.mock.On("CountPerDay", ctx)}
}

func (_c *MockQuerier_CountPerDay_Call) Run(run func(ctx context.Context)) *MockQuerier_CountPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_CountPerDay_Call) Return(countPerDayRows []persist_postgres.CountPerDayRow, err error) *MockQuerier_CountPerDay_Call {
	_c.Call.Return(countPerDayRows, err)
	return _c
}

func (_c *MockQuerier_CountPerDay_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.CountPerDayRow, error)) *MockQuerier_CountPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePingPong provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreatePingPong(ctx context.Context, arg persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePingPong")
	}

	var r0 persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persist_postgres.CreatePingPongParams) persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(persist_postgres.Pingpong)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persist_postgres.CreatePingPongParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreatePingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePingPong'
type MockQuerier_CreatePingPong_Call struct {
	*mock.Call
}

// CreatePingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - arg persist_postgres.CreatePingPongParams
func (_e *MockQuerier_Expecter) CreatePingPong(ctx interface{}, arg interface{}) *MockQuerier_CreatePingPong_Call {
	return &MockQuerier_CreatePingPong_Call{Call: _e.mock.On("CreatePingPong", ctx, arg)}
}

func (_c *MockQuerier_CreatePingPong_Call) Run(run func(ctx context.Context, arg persist_postgres.CreatePingPongParams)) *MockQuerier_CreatePingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persist_postgres.CreatePingPongParams
		if args[1] != nil {
			arg1 = args[1].(persist_postgres.CreatePingPongParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreatePingPong_Call) Return(pingpong persist_postgres.Pingpong, err error) *MockQuerier_CreatePingPong_Call {
	_c.Call.Return(pingpong, err)
	return _c
}

func (_c *MockQuerier_CreatePingPong_Call) RunAndReturn(run func(ctx context.Context, arg persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error)) *MockQuerier_CreatePingPong_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FindAll(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockQuerier_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FindAll(ctx interface{}) *MockQuerier_FindAll_Call {
	return &MockQuerier_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockQuerier_FindAll_Call) Run(run func(ctx context.Context)) *MockQuerier_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FindAll_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockQuerier_FindAll_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockQuerier_FindAll_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockQuerier_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPing provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FindAllPing(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPing")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FindAllPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPing'
type MockQuerier_FindAllPing_Call struct {
	*mock.Call
}

// FindAllPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FindAllPing(ctx interface{}) *MockQuerier_FindAllPing_Call {
	return &MockQuerier_FindAllPing_Call{Call: _e.mock.On("FindAllPing", ctx)}
}

func (_c *MockQuerier_FindAllPing_Call) Run(run func(ctx context.Context)) *MockQuerier_FindAllPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FindAllPing_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockQuerier_FindAllPing_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockQuerier_FindAllPing_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockQuerier_FindAllPing_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPong provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FindAllPong(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPong")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FindAllPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPong'
type MockQuerier_FindAllPong_Call struct {
	*mock.Call
}

// FindAllPong is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FindAllPong(ctx interface{}) *MockQuerier_FindAllPong_Call {
	return &MockQuerier_FindAllPong_Call{Call: _e.mock.On("FindAllPong", ctx)}
}

func (_c *MockQuerier_FindAllPong_Call) Run(run func(ctx context.Context)) *MockQuerier_FindAllPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FindAllPong_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockQuerier_FindAllPong_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockQuerier_FindAllPong_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockQuerier_FindAllPong_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistribution provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FrequencyDistribution(ctx context.Context) ([]persist_postgres.FrequencyDistributionRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistribution")
	}

	var r0 []persist_postgres.FrequencyDistributionRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FrequencyDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistribution'
type MockQuerier_FrequencyDistribution_Call struct {
	*mock.Call
}

// FrequencyDistribution is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FrequencyDistribution(ctx interface{}) *MockQuerier_FrequencyDistribution_Call {
	return &MockQuerier_FrequencyDistribution_Call{Call: _e.mock.On("FrequencyDistribution", ctx)}
}

func (_c *MockQuerier_FrequencyDistribution_Call) Run(run func(ctx context.Context)) *MockQuerier_FrequencyDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FrequencyDistribution_Call) Return(frequencyDistributionRows []persist_postgres.FrequencyDistributionRow, err error) *MockQuerier_FrequencyDistribution_Call {
	_c.Call.Return(frequencyDistributionRows, err)
	return _c
}

func (_c *MockQuerier_FrequencyDistribution_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionRow, error)) *MockQuerier_FrequencyDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDay provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FrequencyDistributionByDay(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDay")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FrequencyDistributionByDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDay'
type MockQuerier_FrequencyDistributionByDay_Call struct {
	*mock.Call
}

// FrequencyDistributionByDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FrequencyDistributionByDay(ctx interface{}) *MockQuerier_FrequencyDistributionByDay_Call {
	return &MockQuerier_FrequencyDistributionByDay_Call{Call: _e.mock.On("FrequencyDistributionByDay", ctx)}
}

func (_c *MockQuerier_FrequencyDistributionByDay_Call) Run(run func(ctx context.Context)) *MockQuerier_FrequencyDistributionByDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDay_Call) Return(frequencyDistributionByDayRows []persist_postgres.FrequencyDistributionByDayRow, err error) *MockQuerier_FrequencyDistributionByDay_Call {
	_c.Call.Return(frequencyDistributionByDayRows, err)
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDay_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error)) *MockQuerier_FrequencyDistributionByDay_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDayPing provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FrequencyDistributionByDayPing(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDayPing")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayPingRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayPingRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayPingRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FrequencyDistributionByDayPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDayPing'
type MockQuerier_FrequencyDistributionByDayPing_Call struct {
	*mock.Call
}

// FrequencyDistributionByDayPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FrequencyDistributionByDayPing(ctx interface{}) *MockQuerier_FrequencyDistributionByDayPing_Call {
	return &MockQuerier_FrequencyDistributionByDayPing_Call{Call: _e.mock.On("FrequencyDistributionByDayPing", ctx)}
}

func (_c *MockQuerier_FrequencyDistributionByDayPing_Call) Run(run func(ctx context.Context)) *MockQuerier_FrequencyDistributionByDayPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDayPing_Call) Return(frequencyDistributionByDayPingRows []persist_postgres.FrequencyDistributionByDayPingRow, err error) *MockQuerier_FrequencyDistributionByDayPing_Call {
	_c.Call.Return(frequencyDistributionByDayPingRows, err)
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDayPing_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error)) *MockQuerier_FrequencyDistributionByDayPing_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDayPong provides a mock function for the type MockQuerier
func (_mock *MockQuerier) FrequencyDistributionByDayPong(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDayPong")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayPongRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayPongRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayPongRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_FrequencyDistributionByDayPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDayPong'
type MockQuerier_FrequencyDistributionByDayPong_Call struct {
	*mock.Call
}

// FrequencyDistributionByDayPong is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FrequencyDistributionByDayPong(ctx interface{}) *MockQuerier_FrequencyDistributionByDayPong_Call {
	return &MockQuerier_FrequencyDistributionByDayPong_Call{Call: _e.mock.On("FrequencyDistributionByDayPong", ctx)}
}

func (_c *MockQuerier_FrequencyDistributionByDayPong_Call) Run(run func(ctx context.Context)) *MockQuerier_FrequencyDistributionByDayPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDayPong_Call) Return(frequencyDistributionByDayPongRows []persist_postgres.FrequencyDistributionByDayPongRow, err error) *MockQuerier_FrequencyDistributionByDayPong_Call {
	_c.Call.Return(frequencyDistributionByDayPongRows, err)
	return _c
}

func (_c *MockQuerier_FrequencyDistributionByDayPong_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error)) *MockQuerier_FrequencyDistributionByDayPong_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongs provides a mock function for the type MockQuerier
func (_mock *MockQuerier) TotalNumberOfPingPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_TotalNumberOfPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongs'
type MockQuerier_TotalNumberOfPingPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) TotalNumberOfPingPongs(ctx interface{}) *MockQuerier_TotalNumberOfPingPongs_Call {
	return &MockQuerier_TotalNumberOfPingPongs_Call{Call: _e.mock.On("TotalNumberOfPingPongs", ctx)}
}

func (_c *MockQuerier_TotalNumberOfPingPongs_Call) Run(run func(ctx context.Context)) *MockQuerier_TotalNumberOfPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_TotalNumberOfPingPongs_Call) Return(n int64, err error) *MockQuerier_TotalNumberOfPingPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_TotalNumberOfPingPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockQuerier_TotalNumberOfPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPings provides a mock function for the type MockQuerier
func (_mock *MockQuerier) TotalNumberOfPings(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPings")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_TotalNumberOfPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPings'
type MockQuerier_TotalNumberOfPings_Call struct {
	*mock.Call
}

// TotalNumberOfPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) TotalNumberOfPings(ctx interface{}) *MockQuerier_TotalNumberOfPings_Call {
	return &MockQuerier_TotalNumberOfPings_Call{Call: _e.mock.On("TotalNumberOfPings", ctx)}
}

func (_c *MockQuerier_TotalNumberOfPings_Call) Run(run func(ctx context.Context)) *MockQuerier_TotalNumberOfPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_TotalNumberOfPings_Call) Return(n int64, err error) *MockQuerier_TotalNumberOfPings_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_TotalNumberOfPings_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockQuerier_TotalNumberOfPings_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPongs provides a mock function for the type MockQuerier
func (_mock *MockQuerier) TotalNumberOfPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_TotalNumberOfPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPongs'
type MockQuerier_TotalNumberOfPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) TotalNumberOfPongs(ctx interface{}) *MockQuerier_TotalNumberOfPongs_Call {
	return &MockQuerier_TotalNumberOfPongs_Call{Call: _e.mock.On("TotalNumberOfPongs", ctx)}
}

func (_c *MockQuerier_TotalNumberOfPongs_Call) Run(run func(ctx context.Context)) *MockQuerier_TotalNumberOfPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_TotalNumberOfPongs_Call) Return(n int64, err error) *MockQuerier_TotalNumberOfPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_TotalNumberOfPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockQuerier_TotalNumberOfPongs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIQuerierPingPong creates a new instance of MockIQuerierPingPong. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIQuerierPingPong(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIQuerierPingPong {
	mock := &MockIQuerierPingPong{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIQuerierPingPong is an autogenerated mock type for the IQuerierPingPong type
type MockIQuerierPingPong struct {
	mock.Mock
}

type MockIQuerierPingPong_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIQuerierPingPong) EXPECT() *MockIQuerierPingPong_Expecter {
	return &MockIQuerierPingPong_Expecter{mock: &_m.Mock}
}

// CountPerDay provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) CountPerDay(ctx context.Context) ([]persist_postgres.CountPerDayRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountPerDay")
	}

	var r0 []persist_postgres.CountPerDayRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.CountPerDayRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.CountPerDayRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.CountPerDayRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_CountPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountPerDay'
type MockIQuerierPingPong_CountPerDay_Call struct {
	*mock.Call
}

// CountPerDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) CountPerDay(ctx interface{}) *MockIQuerierPingPong_CountPerDay_Call {
	return &MockIQuerierPingPong_CountPerDay_Call{Call: _e.mock.On("CountPerDay", ctx)}
}

func (_c *MockIQuerierPingPong_CountPerDay_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_CountPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_CountPerDay_Call) Return(countPerDayRows []persist_postgres.CountPerDayRow, err error) *MockIQuerierPingPong_CountPerDay_Call {
	_c.Call.Return(countPerDayRows, err)
	return _c
}

func (_c *MockIQuerierPingPong_CountPerDay_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.CountPerDayRow, error)) *MockIQuerierPingPong_CountPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePingPong provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) CreatePingPong(ctx context.Context, arg persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreatePingPong")
	}

	var r0 persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, persist_postgres.CreatePingPongParams) persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(persist_postgres.Pingpong)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, persist_postgres.CreatePingPongParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_CreatePingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePingPong'
type MockIQuerierPingPong_CreatePingPong_Call struct {
	*mock.Call
}

// CreatePingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - arg persist_postgres.CreatePingPongParams
func (_e *MockIQuerierPingPong_Expecter) CreatePingPong(ctx interface{}, arg interface{}) *MockIQuerierPingPong_CreatePingPong_Call {
	return &MockIQuerierPingPong_CreatePingPong_Call{Call: _e.mock.On("CreatePingPong", ctx, arg)}
}

func (_c *MockIQuerierPingPong_CreatePingPong_Call) Run(run func(ctx context.Context, arg persist_postgres.CreatePingPongParams)) *MockIQuerierPingPong_CreatePingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 persist_postgres.CreatePingPongParams
		if args[1] != nil {
			arg1 = args[1].(persist_postgres.CreatePingPongParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_CreatePingPong_Call) Return(pingpong persist_postgres.Pingpong, err error) *MockIQuerierPingPong_CreatePingPong_Call {
	_c.Call.Return(pingpong, err)
	return _c
}

func (_c *MockIQuerierPingPong_CreatePingPong_Call) RunAndReturn(run func(ctx context.Context, arg persist_postgres.CreatePingPongParams) (persist_postgres.Pingpong, error)) *MockIQuerierPingPong_CreatePingPong_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FindAll(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockIQuerierPingPong_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FindAll(ctx interface{}) *MockIQuerierPingPong_FindAll_Call {
	return &MockIQuerierPingPong_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockIQuerierPingPong_FindAll_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FindAll_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockIQuerierPingPong_FindAll_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockIQuerierPingPong_FindAll_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockIQuerierPingPong_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPing provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FindAllPing(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPing")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FindAllPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPing'
type MockIQuerierPingPong_FindAllPing_Call struct {
	*mock.Call
}

// FindAllPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FindAllPing(ctx interface{}) *MockIQuerierPingPong_FindAllPing_Call {
	return &MockIQuerierPingPong_FindAllPing_Call{Call: _e.mock.On("FindAllPing", ctx)}
}

func (_c *MockIQuerierPingPong_FindAllPing_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FindAllPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FindAllPing_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockIQuerierPingPong_FindAllPing_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockIQuerierPingPong_FindAllPing_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockIQuerierPingPong_FindAllPing_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPong provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FindAllPong(ctx context.Context) ([]persist_postgres.Pingpong, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPong")
	}

	var r0 []persist_postgres.Pingpong
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.Pingpong, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.Pingpong); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.Pingpong)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FindAllPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPong'
type MockIQuerierPingPong_FindAllPong_Call struct {
	*mock.Call
}

// FindAllPong is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FindAllPong(ctx interface{}) *MockIQuerierPingPong_FindAllPong_Call {
	return &MockIQuerierPingPong_FindAllPong_Call{Call: _e.mock.On("FindAllPong", ctx)}
}

func (_c *MockIQuerierPingPong_FindAllPong_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FindAllPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FindAllPong_Call) Return(pingpongs []persist_postgres.Pingpong, err error) *MockIQuerierPingPong_FindAllPong_Call {
	_c.Call.Return(pingpongs, err)
	return _c
}

func (_c *MockIQuerierPingPong_FindAllPong_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.Pingpong, error)) *MockIQuerierPingPong_FindAllPong_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistribution provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FrequencyDistribution(ctx context.Context) ([]persist_postgres.FrequencyDistributionRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistribution")
	}

	var r0 []persist_postgres.FrequencyDistributionRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FrequencyDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistribution'
type MockIQuerierPingPong_FrequencyDistribution_Call struct {
	*mock.Call
}

// FrequencyDistribution is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FrequencyDistribution(ctx interface{}) *MockIQuerierPingPong_FrequencyDistribution_Call {
	return &MockIQuerierPingPong_FrequencyDistribution_Call{Call: _e.mock.On("FrequencyDistribution", ctx)}
}

func (_c *MockIQuerierPingPong_FrequencyDistribution_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FrequencyDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistribution_Call) Return(frequencyDistributionRows []persist_postgres.FrequencyDistributionRow, err error) *MockIQuerierPingPong_FrequencyDistribution_Call {
	_c.Call.Return(frequencyDistributionRows, err)
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistribution_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionRow, error)) *MockIQuerierPingPong_FrequencyDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDay provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FrequencyDistributionByDay(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDay")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FrequencyDistributionByDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDay'
type MockIQuerierPingPong_FrequencyDistributionByDay_Call struct {
	*mock.Call
}

// FrequencyDistributionByDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FrequencyDistributionByDay(ctx interface{}) *MockIQuerierPingPong_FrequencyDistributionByDay_Call {
	return &MockIQuerierPingPong_FrequencyDistributionByDay_Call{Call: _e.mock.On("FrequencyDistributionByDay", ctx)}
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDay_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FrequencyDistributionByDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDay_Call) Return(frequencyDistributionByDayRows []persist_postgres.FrequencyDistributionByDayRow, err error) *MockIQuerierPingPong_FrequencyDistributionByDay_Call {
	_c.Call.Return(frequencyDistributionByDayRows, err)
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDay_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayRow, error)) *MockIQuerierPingPong_FrequencyDistributionByDay_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDayPing provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FrequencyDistributionByDayPing(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDayPing")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayPingRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayPingRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayPingRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FrequencyDistributionByDayPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDayPing'
type MockIQuerierPingPong_FrequencyDistributionByDayPing_Call struct {
	*mock.Call
}

// FrequencyDistributionByDayPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FrequencyDistributionByDayPing(ctx interface{}) *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call {
	return &MockIQuerierPingPong_FrequencyDistributionByDayPing_Call{Call: _e.mock.On("FrequencyDistributionByDayPing", ctx)}
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call) Return(frequencyDistributionByDayPingRows []persist_postgres.FrequencyDistributionByDayPingRow, err error) *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call {
	_c.Call.Return(frequencyDistributionByDayPingRows, err)
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPingRow, error)) *MockIQuerierPingPong_FrequencyDistributionByDayPing_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyDistributionByDayPong provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) FrequencyDistributionByDayPong(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FrequencyDistributionByDayPong")
	}

	var r0 []persist_postgres.FrequencyDistributionByDayPongRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []persist_postgres.FrequencyDistributionByDayPongRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persist_postgres.FrequencyDistributionByDayPongRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_FrequencyDistributionByDayPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyDistributionByDayPong'
type MockIQuerierPingPong_FrequencyDistributionByDayPong_Call struct {
	*mock.Call
}

// FrequencyDistributionByDayPong is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) FrequencyDistributionByDayPong(ctx interface{}) *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call {
	return &MockIQuerierPingPong_FrequencyDistributionByDayPong_Call{Call: _e.mock.On("FrequencyDistributionByDayPong", ctx)}
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call) Return(frequencyDistributionByDayPongRows []persist_postgres.FrequencyDistributionByDayPongRow, err error) *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call {
	_c.Call.Return(frequencyDistributionByDayPongRows, err)
	return _c
}

func (_c *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call) RunAndReturn(run func(ctx context.Context) ([]persist_postgres.FrequencyDistributionByDayPongRow, error)) *MockIQuerierPingPong_FrequencyDistributionByDayPong_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongs provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) TotalNumberOfPingPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_TotalNumberOfPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongs'
type MockIQuerierPingPong_TotalNumberOfPingPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) TotalNumberOfPingPongs(ctx interface{}) *MockIQuerierPingPong_TotalNumberOfPingPongs_Call {
	return &MockIQuerierPingPong_TotalNumberOfPingPongs_Call{Call: _e.mock.On("TotalNumberOfPingPongs", ctx)}
}

func (_c *MockIQuerierPingPong_TotalNumberOfPingPongs_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_TotalNumberOfPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPingPongs_Call) Return(n int64, err error) *MockIQuerierPingPong_TotalNumberOfPingPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPingPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIQuerierPingPong_TotalNumberOfPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPings provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) TotalNumberOfPings(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPings")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_TotalNumberOfPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPings'
type MockIQuerierPingPong_TotalNumberOfPings_Call struct {
	*mock.Call
}

// TotalNumberOfPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) TotalNumberOfPings(ctx interface{}) *MockIQuerierPingPong_TotalNumberOfPings_Call {
	return &MockIQuerierPingPong_TotalNumberOfPings_Call{Call: _e.mock.On("TotalNumberOfPings", ctx)}
}

func (_c *MockIQuerierPingPong_TotalNumberOfPings_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_TotalNumberOfPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPings_Call) Return(n int64, err error) *MockIQuerierPingPong_TotalNumberOfPings_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPings_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIQuerierPingPong_TotalNumberOfPings_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPongs provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) TotalNumberOfPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIQuerierPingPong_TotalNumberOfPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPongs'
type MockIQuerierPingPong_TotalNumberOfPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIQuerierPingPong_Expecter) TotalNumberOfPongs(ctx interface{}) *MockIQuerierPingPong_TotalNumberOfPongs_Call {
	return &MockIQuerierPingPong_TotalNumberOfPongs_Call{Call: _e.mock.On("TotalNumberOfPongs", ctx)}
}

func (_c *MockIQuerierPingPong_TotalNumberOfPongs_Call) Run(run func(ctx context.Context)) *MockIQuerierPingPong_TotalNumberOfPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPongs_Call) Return(n int64, err error) *MockIQuerierPingPong_TotalNumberOfPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIQuerierPingPong_TotalNumberOfPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIQuerierPingPong_TotalNumberOfPongs_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function for the type MockIQuerierPingPong
func (_mock *MockIQuerierPingPong) WithTx(tx pgx.Tx) persist_postgres.IQuerierPingPong {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 persist_postgres.IQuerierPingPong
	if returnFunc, ok := ret.Get(0).(func(pgx.Tx) persist_postgres.IQuerierPingPong); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persist_postgres.IQuerierPingPong)
		}
	}
	return r0
}

// MockIQuerierPingPong_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockIQuerierPingPong_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx pgx.Tx
func (_e *MockIQuerierPingPong_Expecter) WithTx(tx interface{}) *MockIQuerierPingPong_WithTx_Call {
	return &MockIQuerierPingPong_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *MockIQuerierPingPong_WithTx_Call) Run(run func(tx pgx.Tx)) *MockIQuerierPingPong_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 pgx.Tx
		if args[0] != nil {
			arg0 = args[0].(pgx.Tx)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIQuerierPingPong_WithTx_Call) Return(iQuerierPingPong persist_postgres.IQuerierPingPong) *MockIQuerierPingPong_WithTx_Call {
	_c.Call.Return(iQuerierPingPong)
	return _c
}

func (_c *MockIQuerierPingPong_WithTx_Call) RunAndReturn(run func(tx pgx.Tx) persist_postgres.IQuerierPingPong) *MockIQuerierPingPong_WithTx_Call {
	_c.Call.Return(run)
	return _c
}
