// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/cooperlutz/go-full/internal/pingpong/domain/entity"
	"github.com/cooperlutz/go-full/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIPingPongRepository creates a new instance of MockIPingPongRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPingPongRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPingPongRepository {
	mock := &MockIPingPongRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPingPongRepository is an autogenerated mock type for the IPingPongRepository type
type MockIPingPongRepository struct {
	mock.Mock
}

type MockIPingPongRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPingPongRepository) EXPECT() *MockIPingPongRepository_Expecter {
	return &MockIPingPongRepository_Expecter{mock: &_m.Mock}
}

// AverageNumberOfPingPongsCreatedPerDay provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) AverageNumberOfPingPongsCreatedPerDay(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AverageNumberOfPingPongsCreatedPerDay")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageNumberOfPingPongsCreatedPerDay'
type MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call struct {
	*mock.Call
}

// AverageNumberOfPingPongsCreatedPerDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) AverageNumberOfPingPongsCreatedPerDay(ctx interface{}) *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call {
	return &MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call{Call: _e.mock.On("AverageNumberOfPingPongsCreatedPerDay", ctx)}
}

func (_c *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call) Return(n int64, err error) *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIPingPongRepository_AverageNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) FindAll(ctx context.Context) (entity.ListOfPingPongs, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 entity.ListOfPingPongs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (entity.ListOfPingPongs, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) entity.ListOfPingPongs); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(entity.ListOfPingPongs)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockIPingPongRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) FindAll(ctx interface{}) *MockIPingPongRepository_FindAll_Call {
	return &MockIPingPongRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockIPingPongRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_FindAll_Call) Return(listOfPingPongs entity.ListOfPingPongs, err error) *MockIPingPongRepository_FindAll_Call {
	_c.Call.Return(listOfPingPongs, err)
	return _c
}

func (_c *MockIPingPongRepository_FindAll_Call) RunAndReturn(run func(ctx context.Context) (entity.ListOfPingPongs, error)) *MockIPingPongRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPings provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) FindAllPings(ctx context.Context) (entity.ListOfPingPongs, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPings")
	}

	var r0 entity.ListOfPingPongs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (entity.ListOfPingPongs, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) entity.ListOfPingPongs); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(entity.ListOfPingPongs)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_FindAllPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPings'
type MockIPingPongRepository_FindAllPings_Call struct {
	*mock.Call
}

// FindAllPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) FindAllPings(ctx interface{}) *MockIPingPongRepository_FindAllPings_Call {
	return &MockIPingPongRepository_FindAllPings_Call{Call: _e.mock.On("FindAllPings", ctx)}
}

func (_c *MockIPingPongRepository_FindAllPings_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_FindAllPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_FindAllPings_Call) Return(listOfPingPongs entity.ListOfPingPongs, err error) *MockIPingPongRepository_FindAllPings_Call {
	_c.Call.Return(listOfPingPongs, err)
	return _c
}

func (_c *MockIPingPongRepository_FindAllPings_Call) RunAndReturn(run func(ctx context.Context) (entity.ListOfPingPongs, error)) *MockIPingPongRepository_FindAllPings_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllPongs provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) FindAllPongs(ctx context.Context) (entity.ListOfPingPongs, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPongs")
	}

	var r0 entity.ListOfPingPongs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (entity.ListOfPingPongs, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) entity.ListOfPingPongs); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(entity.ListOfPingPongs)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_FindAllPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllPongs'
type MockIPingPongRepository_FindAllPongs_Call struct {
	*mock.Call
}

// FindAllPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) FindAllPongs(ctx interface{}) *MockIPingPongRepository_FindAllPongs_Call {
	return &MockIPingPongRepository_FindAllPongs_Call{Call: _e.mock.On("FindAllPongs", ctx)}
}

func (_c *MockIPingPongRepository_FindAllPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_FindAllPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_FindAllPongs_Call) Return(listOfPingPongs entity.ListOfPingPongs, err error) *MockIPingPongRepository_FindAllPongs_Call {
	_c.Call.Return(listOfPingPongs, err)
	return _c
}

func (_c *MockIPingPongRepository_FindAllPongs_Call) RunAndReturn(run func(ctx context.Context) (entity.ListOfPingPongs, error)) *MockIPingPongRepository_FindAllPongs_Call {
	_c.Call.Return(run)
	return _c
}

// SavePingPong provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) SavePingPong(ctx context.Context, p *entity.PingPongEntity) error {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SavePingPong")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.PingPongEntity) error); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPingPongRepository_SavePingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePingPong'
type MockIPingPongRepository_SavePingPong_Call struct {
	*mock.Call
}

// SavePingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - p *entity.PingPongEntity
func (_e *MockIPingPongRepository_Expecter) SavePingPong(ctx interface{}, p interface{}) *MockIPingPongRepository_SavePingPong_Call {
	return &MockIPingPongRepository_SavePingPong_Call{Call: _e.mock.On("SavePingPong", ctx, p)}
}

func (_c *MockIPingPongRepository_SavePingPong_Call) Run(run func(ctx context.Context, p *entity.PingPongEntity)) *MockIPingPongRepository_SavePingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entity.PingPongEntity
		if args[1] != nil {
			arg1 = args[1].(*entity.PingPongEntity)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_SavePingPong_Call) Return(err error) *MockIPingPongRepository_SavePingPong_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPingPongRepository_SavePingPong_Call) RunAndReturn(run func(ctx context.Context, p *entity.PingPongEntity) error) *MockIPingPongRepository_SavePingPong_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongs provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) TotalNumberOfPingPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_TotalNumberOfPingPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongs'
type MockIPingPongRepository_TotalNumberOfPingPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) TotalNumberOfPingPongs(ctx interface{}) *MockIPingPongRepository_TotalNumberOfPingPongs_Call {
	return &MockIPingPongRepository_TotalNumberOfPingPongs_Call{Call: _e.mock.On("TotalNumberOfPingPongs", ctx)}
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_TotalNumberOfPingPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongs_Call) Return(n int64, err error) *MockIPingPongRepository_TotalNumberOfPingPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIPingPongRepository_TotalNumberOfPingPongs_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPingPongsCreatedPerDay provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) TotalNumberOfPingPongsCreatedPerDay(ctx context.Context) ([]types.MeasureCountbyDateTime, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPingPongsCreatedPerDay")
	}

	var r0 []types.MeasureCountbyDateTime
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]types.MeasureCountbyDateTime, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []types.MeasureCountbyDateTime); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MeasureCountbyDateTime)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPingPongsCreatedPerDay'
type MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call struct {
	*mock.Call
}

// TotalNumberOfPingPongsCreatedPerDay is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) TotalNumberOfPingPongsCreatedPerDay(ctx interface{}) *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call {
	return &MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call{Call: _e.mock.On("TotalNumberOfPingPongsCreatedPerDay", ctx)}
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call) Return(measureCountbyDateTimes []types.MeasureCountbyDateTime, err error) *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Return(measureCountbyDateTimes, err)
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call) RunAndReturn(run func(ctx context.Context) ([]types.MeasureCountbyDateTime, error)) *MockIPingPongRepository_TotalNumberOfPingPongsCreatedPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPings provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) TotalNumberOfPings(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPings")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_TotalNumberOfPings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPings'
type MockIPingPongRepository_TotalNumberOfPings_Call struct {
	*mock.Call
}

// TotalNumberOfPings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) TotalNumberOfPings(ctx interface{}) *MockIPingPongRepository_TotalNumberOfPings_Call {
	return &MockIPingPongRepository_TotalNumberOfPings_Call{Call: _e.mock.On("TotalNumberOfPings", ctx)}
}

func (_c *MockIPingPongRepository_TotalNumberOfPings_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_TotalNumberOfPings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPings_Call) Return(n int64, err error) *MockIPingPongRepository_TotalNumberOfPings_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPings_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIPingPongRepository_TotalNumberOfPings_Call {
	_c.Call.Return(run)
	return _c
}

// TotalNumberOfPongs provides a mock function for the type MockIPingPongRepository
func (_mock *MockIPingPongRepository) TotalNumberOfPongs(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TotalNumberOfPongs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPingPongRepository_TotalNumberOfPongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalNumberOfPongs'
type MockIPingPongRepository_TotalNumberOfPongs_Call struct {
	*mock.Call
}

// TotalNumberOfPongs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPingPongRepository_Expecter) TotalNumberOfPongs(ctx interface{}) *MockIPingPongRepository_TotalNumberOfPongs_Call {
	return &MockIPingPongRepository_TotalNumberOfPongs_Call{Call: _e.mock.On("TotalNumberOfPongs", ctx)}
}

func (_c *MockIPingPongRepository_TotalNumberOfPongs_Call) Run(run func(ctx context.Context)) *MockIPingPongRepository_TotalNumberOfPongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPongs_Call) Return(n int64, err error) *MockIPingPongRepository_TotalNumberOfPongs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIPingPongRepository_TotalNumberOfPongs_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockIPingPongRepository_TotalNumberOfPongs_Call {
	_c.Call.Return(run)
	return _c
}
